// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.3.0.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

use tray_icon::{
    menu::{AboutMetadata, Menu, MenuEvent, MenuItem, PredefinedMenuItem},
    TrayIcon, TrayIconBuilder, TrayIconEvent,
};

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.3.0";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = -1787060630;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__api__entity__ffi_sys_tray_event_from_event_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_sys_tray_event_from_event",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_event_type =
                <crate::api::entity::MySysTrayEventEnum>::sse_decode(&mut deserializer);
            let api_menu_event_id = <Option<String>>::sse_decode(&mut deserializer);
            let api_tray_event =
                <Option<crate::api::entity::FFIIconEvent>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::entity::FFISysTrayEvent::from_event(
                            api_event_type,
                            api_menu_event_id,
                            api_tray_event,
                        ))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__sys_tray__builder_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "builder",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_path = <String>::sse_decode(&mut deserializer);
            let api_sink = <StreamSink<
                crate::api::entity::FFISysTrayEvent,
                flutter_rust_bridge::for_generated::SseCodec,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::sys_tray::builder(api_path, api_sink);
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__sys_tray__greet_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "greet",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_name = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::sys_tray::greet(api_name))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__sys_tray__init_app_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init_app",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::sys_tray::init_app();
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}

// Section: dart2rust

impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::anyhow::anyhow!("{}", inner);
    }
}

impl SseDecode
    for StreamSink<
        crate::api::entity::FFISysTrayEvent,
        flutter_rust_bridge::for_generated::SseCodec,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return StreamSink::deserialize(inner);
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_f64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::api::entity::FFIIconEvent {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_id = <String>::sse_decode(deserializer);
                let mut var_position =
                    <crate::api::entity::FFIPhysicalPosition>::sse_decode(deserializer);
                let mut var_rect = <crate::api::entity::FFIRect>::sse_decode(deserializer);
                let mut var_button = <crate::api::entity::FFIMouseButton>::sse_decode(deserializer);
                let mut var_buttonState =
                    <crate::api::entity::FFIMouseButtonState>::sse_decode(deserializer);
                return crate::api::entity::FFIIconEvent::Click {
                    id: var_id,
                    position: var_position,
                    rect: var_rect,
                    button: var_button,
                    button_state: var_buttonState,
                };
            }
            1 => {
                let mut var_id = <String>::sse_decode(deserializer);
                let mut var_position =
                    <crate::api::entity::FFIPhysicalPosition>::sse_decode(deserializer);
                let mut var_rect = <crate::api::entity::FFIRect>::sse_decode(deserializer);
                let mut var_button = <crate::api::entity::FFIMouseButton>::sse_decode(deserializer);
                return crate::api::entity::FFIIconEvent::DoubleClick {
                    id: var_id,
                    position: var_position,
                    rect: var_rect,
                    button: var_button,
                };
            }
            2 => {
                let mut var_id = <String>::sse_decode(deserializer);
                let mut var_position =
                    <crate::api::entity::FFIPhysicalPosition>::sse_decode(deserializer);
                let mut var_rect = <crate::api::entity::FFIRect>::sse_decode(deserializer);
                return crate::api::entity::FFIIconEvent::Enter {
                    id: var_id,
                    position: var_position,
                    rect: var_rect,
                };
            }
            3 => {
                let mut var_id = <String>::sse_decode(deserializer);
                let mut var_position =
                    <crate::api::entity::FFIPhysicalPosition>::sse_decode(deserializer);
                let mut var_rect = <crate::api::entity::FFIRect>::sse_decode(deserializer);
                return crate::api::entity::FFIIconEvent::Move {
                    id: var_id,
                    position: var_position,
                    rect: var_rect,
                };
            }
            4 => {
                let mut var_id = <String>::sse_decode(deserializer);
                let mut var_position =
                    <crate::api::entity::FFIPhysicalPosition>::sse_decode(deserializer);
                let mut var_rect = <crate::api::entity::FFIRect>::sse_decode(deserializer);
                return crate::api::entity::FFIIconEvent::Leave {
                    id: var_id,
                    position: var_position,
                    rect: var_rect,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::entity::FFIMouseButton {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::entity::FFIMouseButton::Left,
            1 => crate::api::entity::FFIMouseButton::Right,
            2 => crate::api::entity::FFIMouseButton::Middle,
            _ => unreachable!("Invalid variant for FFIMouseButton: {}", inner),
        };
    }
}

impl SseDecode for crate::api::entity::FFIMouseButtonState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::entity::FFIMouseButtonState::Up,
            1 => crate::api::entity::FFIMouseButtonState::Down,
            _ => unreachable!("Invalid variant for FFIMouseButtonState: {}", inner),
        };
    }
}

impl SseDecode for crate::api::entity::FFIPhysicalPosition {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_x = <f64>::sse_decode(deserializer);
        let mut var_y = <f64>::sse_decode(deserializer);
        return crate::api::entity::FFIPhysicalPosition { x: var_x, y: var_y };
    }
}

impl SseDecode for crate::api::entity::FFIPhysicalSize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_width = <u32>::sse_decode(deserializer);
        let mut var_height = <u32>::sse_decode(deserializer);
        return crate::api::entity::FFIPhysicalSize {
            width: var_width,
            height: var_height,
        };
    }
}

impl SseDecode for crate::api::entity::FFIRect {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_size = <crate::api::entity::FFIPhysicalSize>::sse_decode(deserializer);
        let mut var_position = <crate::api::entity::FFIPhysicalPosition>::sse_decode(deserializer);
        return crate::api::entity::FFIRect {
            size: var_size,
            position: var_position,
        };
    }
}

impl SseDecode for crate::api::entity::FFISysTrayEvent {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_eventType = <crate::api::entity::MySysTrayEventEnum>::sse_decode(deserializer);
        let mut var_menuEventId = <Option<String>>::sse_decode(deserializer);
        let mut var_trayEvent =
            <Option<crate::api::entity::FFIIconEvent>>::sse_decode(deserializer);
        return crate::api::entity::FFISysTrayEvent {
            event_type: var_eventType,
            menu_event_id: var_menuEventId,
            tray_event: var_trayEvent,
        };
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for crate::api::entity::MySysTrayEventEnum {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::entity::MySysTrayEventEnum::MENU,
            1 => crate::api::entity::MySysTrayEventEnum::TRAY,
            2 => crate::api::entity::MySysTrayEventEnum::NONE,
            _ => unreachable!("Invalid variant for MySysTrayEventEnum: {}", inner),
        };
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::entity::FFIIconEvent> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::entity::FFIIconEvent>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        1 => wire__crate__api__entity__ffi_sys_tray_event_from_event_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        2 => wire__crate__api__sys_tray__builder_impl(port, ptr, rust_vec_len, data_len),
        4 => wire__crate__api__sys_tray__init_app_impl(port, ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        3 => wire__crate__api__sys_tray__greet_impl(ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::entity::FFIIconEvent {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::entity::FFIIconEvent::Click {
                id,
                position,
                rect,
                button,
                button_state,
            } => [
                0.into_dart(),
                id.into_into_dart().into_dart(),
                position.into_into_dart().into_dart(),
                rect.into_into_dart().into_dart(),
                button.into_into_dart().into_dart(),
                button_state.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::entity::FFIIconEvent::DoubleClick {
                id,
                position,
                rect,
                button,
            } => [
                1.into_dart(),
                id.into_into_dart().into_dart(),
                position.into_into_dart().into_dart(),
                rect.into_into_dart().into_dart(),
                button.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::entity::FFIIconEvent::Enter { id, position, rect } => [
                2.into_dart(),
                id.into_into_dart().into_dart(),
                position.into_into_dart().into_dart(),
                rect.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::entity::FFIIconEvent::Move { id, position, rect } => [
                3.into_dart(),
                id.into_into_dart().into_dart(),
                position.into_into_dart().into_dart(),
                rect.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::entity::FFIIconEvent::Leave { id, position, rect } => [
                4.into_dart(),
                id.into_into_dart().into_dart(),
                position.into_into_dart().into_dart(),
                rect.into_into_dart().into_dart(),
            ]
            .into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::entity::FFIIconEvent
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::entity::FFIIconEvent>
    for crate::api::entity::FFIIconEvent
{
    fn into_into_dart(self) -> crate::api::entity::FFIIconEvent {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::entity::FFIMouseButton {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Left => 0.into_dart(),
            Self::Right => 1.into_dart(),
            Self::Middle => 2.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::entity::FFIMouseButton
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::entity::FFIMouseButton>
    for crate::api::entity::FFIMouseButton
{
    fn into_into_dart(self) -> crate::api::entity::FFIMouseButton {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::entity::FFIMouseButtonState {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Up => 0.into_dart(),
            Self::Down => 1.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::entity::FFIMouseButtonState
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::entity::FFIMouseButtonState>
    for crate::api::entity::FFIMouseButtonState
{
    fn into_into_dart(self) -> crate::api::entity::FFIMouseButtonState {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::entity::FFIPhysicalPosition {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.x.into_into_dart().into_dart(),
            self.y.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::entity::FFIPhysicalPosition
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::entity::FFIPhysicalPosition>
    for crate::api::entity::FFIPhysicalPosition
{
    fn into_into_dart(self) -> crate::api::entity::FFIPhysicalPosition {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::entity::FFIPhysicalSize {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.width.into_into_dart().into_dart(),
            self.height.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::entity::FFIPhysicalSize
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::entity::FFIPhysicalSize>
    for crate::api::entity::FFIPhysicalSize
{
    fn into_into_dart(self) -> crate::api::entity::FFIPhysicalSize {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::entity::FFIRect {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.size.into_into_dart().into_dart(),
            self.position.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::entity::FFIRect {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::entity::FFIRect>
    for crate::api::entity::FFIRect
{
    fn into_into_dart(self) -> crate::api::entity::FFIRect {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::entity::FFISysTrayEvent {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.event_type.into_into_dart().into_dart(),
            self.menu_event_id.into_into_dart().into_dart(),
            self.tray_event.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::entity::FFISysTrayEvent
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::entity::FFISysTrayEvent>
    for crate::api::entity::FFISysTrayEvent
{
    fn into_into_dart(self) -> crate::api::entity::FFISysTrayEvent {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::entity::MySysTrayEventEnum {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::MENU => 0.into_dart(),
            Self::TRAY => 1.into_dart(),
            Self::NONE => 2.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::entity::MySysTrayEventEnum
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::entity::MySysTrayEventEnum>
    for crate::api::entity::MySysTrayEventEnum
{
    fn into_into_dart(self) -> crate::api::entity::MySysTrayEventEnum {
        self
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode
    for StreamSink<
        crate::api::entity::FFISysTrayEvent,
        flutter_rust_bridge::for_generated::SseCodec,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("")
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_f64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for crate::api::entity::FFIIconEvent {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::entity::FFIIconEvent::Click {
                id,
                position,
                rect,
                button,
                button_state,
            } => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(id, serializer);
                <crate::api::entity::FFIPhysicalPosition>::sse_encode(position, serializer);
                <crate::api::entity::FFIRect>::sse_encode(rect, serializer);
                <crate::api::entity::FFIMouseButton>::sse_encode(button, serializer);
                <crate::api::entity::FFIMouseButtonState>::sse_encode(button_state, serializer);
            }
            crate::api::entity::FFIIconEvent::DoubleClick {
                id,
                position,
                rect,
                button,
            } => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(id, serializer);
                <crate::api::entity::FFIPhysicalPosition>::sse_encode(position, serializer);
                <crate::api::entity::FFIRect>::sse_encode(rect, serializer);
                <crate::api::entity::FFIMouseButton>::sse_encode(button, serializer);
            }
            crate::api::entity::FFIIconEvent::Enter { id, position, rect } => {
                <i32>::sse_encode(2, serializer);
                <String>::sse_encode(id, serializer);
                <crate::api::entity::FFIPhysicalPosition>::sse_encode(position, serializer);
                <crate::api::entity::FFIRect>::sse_encode(rect, serializer);
            }
            crate::api::entity::FFIIconEvent::Move { id, position, rect } => {
                <i32>::sse_encode(3, serializer);
                <String>::sse_encode(id, serializer);
                <crate::api::entity::FFIPhysicalPosition>::sse_encode(position, serializer);
                <crate::api::entity::FFIRect>::sse_encode(rect, serializer);
            }
            crate::api::entity::FFIIconEvent::Leave { id, position, rect } => {
                <i32>::sse_encode(4, serializer);
                <String>::sse_encode(id, serializer);
                <crate::api::entity::FFIPhysicalPosition>::sse_encode(position, serializer);
                <crate::api::entity::FFIRect>::sse_encode(rect, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::entity::FFIMouseButton {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::entity::FFIMouseButton::Left => 0,
                crate::api::entity::FFIMouseButton::Right => 1,
                crate::api::entity::FFIMouseButton::Middle => 2,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::entity::FFIMouseButtonState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::entity::FFIMouseButtonState::Up => 0,
                crate::api::entity::FFIMouseButtonState::Down => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::entity::FFIPhysicalPosition {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <f64>::sse_encode(self.x, serializer);
        <f64>::sse_encode(self.y, serializer);
    }
}

impl SseEncode for crate::api::entity::FFIPhysicalSize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.width, serializer);
        <u32>::sse_encode(self.height, serializer);
    }
}

impl SseEncode for crate::api::entity::FFIRect {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::entity::FFIPhysicalSize>::sse_encode(self.size, serializer);
        <crate::api::entity::FFIPhysicalPosition>::sse_encode(self.position, serializer);
    }
}

impl SseEncode for crate::api::entity::FFISysTrayEvent {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::entity::MySysTrayEventEnum>::sse_encode(self.event_type, serializer);
        <Option<String>>::sse_encode(self.menu_event_id, serializer);
        <Option<crate::api::entity::FFIIconEvent>>::sse_encode(self.tray_event, serializer);
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::api::entity::MySysTrayEventEnum {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::entity::MySysTrayEventEnum::MENU => 0,
                crate::api::entity::MySysTrayEventEnum::TRAY => 1,
                crate::api::entity::MySysTrayEventEnum::NONE => 2,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::entity::FFIIconEvent> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::entity::FFIIconEvent>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // Generated by `flutter_rust_bridge`@ 2.3.0.

    // Section: imports

    use super::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    use tray_icon::{
        menu::{AboutMetadata, Menu, MenuEvent, MenuItem, PredefinedMenuItem},
        TrayIcon, TrayIconBuilder, TrayIconEvent,
    };

    flutter_rust_bridge::frb_generated_boilerplate_io!();
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    // This file is automatically generated, so please do not edit it.
    // Generated by `flutter_rust_bridge`@ 2.3.0.

    // Section: imports

    use super::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::wasm_bindgen;
    use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    use tray_icon::{
        menu::{AboutMetadata, Menu, MenuEvent, MenuItem, PredefinedMenuItem},
        TrayIcon, TrayIconBuilder, TrayIconEvent,
    };

    flutter_rust_bridge::frb_generated_boilerplate_web!();
}
#[cfg(target_family = "wasm")]
pub use web::*;
