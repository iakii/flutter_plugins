// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.3.0.

// hello world

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/entity.dart';
import 'api/sys_tray.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw);

  @protected
  RustStreamSink<FFISysTrayEvent> dco_decode_StreamSink_ffi_sys_tray_event_Sse(
      dynamic raw);

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  FFIIconEvent dco_decode_box_autoadd_ffi_icon_event(dynamic raw);

  @protected
  FFIPhysicalPosition dco_decode_box_autoadd_ffi_physical_position(dynamic raw);

  @protected
  FFIRect dco_decode_box_autoadd_ffi_rect(dynamic raw);

  @protected
  double dco_decode_f_64(dynamic raw);

  @protected
  FFIIconEvent dco_decode_ffi_icon_event(dynamic raw);

  @protected
  FFIMouseButton dco_decode_ffi_mouse_button(dynamic raw);

  @protected
  FFIMouseButtonState dco_decode_ffi_mouse_button_state(dynamic raw);

  @protected
  FFIPhysicalPosition dco_decode_ffi_physical_position(dynamic raw);

  @protected
  FFIPhysicalSize dco_decode_ffi_physical_size(dynamic raw);

  @protected
  FFIRect dco_decode_ffi_rect(dynamic raw);

  @protected
  FFISysTrayEvent dco_decode_ffi_sys_tray_event(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  MySysTrayEventEnum dco_decode_my_sys_tray_event_enum(dynamic raw);

  @protected
  String? dco_decode_opt_String(dynamic raw);

  @protected
  FFIIconEvent? dco_decode_opt_box_autoadd_ffi_icon_event(dynamic raw);

  @protected
  int dco_decode_u_32(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer);

  @protected
  RustStreamSink<FFISysTrayEvent> sse_decode_StreamSink_ffi_sys_tray_event_Sse(
      SseDeserializer deserializer);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  FFIIconEvent sse_decode_box_autoadd_ffi_icon_event(
      SseDeserializer deserializer);

  @protected
  FFIPhysicalPosition sse_decode_box_autoadd_ffi_physical_position(
      SseDeserializer deserializer);

  @protected
  FFIRect sse_decode_box_autoadd_ffi_rect(SseDeserializer deserializer);

  @protected
  double sse_decode_f_64(SseDeserializer deserializer);

  @protected
  FFIIconEvent sse_decode_ffi_icon_event(SseDeserializer deserializer);

  @protected
  FFIMouseButton sse_decode_ffi_mouse_button(SseDeserializer deserializer);

  @protected
  FFIMouseButtonState sse_decode_ffi_mouse_button_state(
      SseDeserializer deserializer);

  @protected
  FFIPhysicalPosition sse_decode_ffi_physical_position(
      SseDeserializer deserializer);

  @protected
  FFIPhysicalSize sse_decode_ffi_physical_size(SseDeserializer deserializer);

  @protected
  FFIRect sse_decode_ffi_rect(SseDeserializer deserializer);

  @protected
  FFISysTrayEvent sse_decode_ffi_sys_tray_event(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  MySysTrayEventEnum sse_decode_my_sys_tray_event_enum(
      SseDeserializer deserializer);

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer);

  @protected
  FFIIconEvent? sse_decode_opt_box_autoadd_ffi_icon_event(
      SseDeserializer deserializer);

  @protected
  int sse_decode_u_32(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer);

  @protected
  void sse_encode_StreamSink_ffi_sys_tray_event_Sse(
      RustStreamSink<FFISysTrayEvent> self, SseSerializer serializer);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ffi_icon_event(
      FFIIconEvent self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ffi_physical_position(
      FFIPhysicalPosition self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ffi_rect(FFIRect self, SseSerializer serializer);

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer);

  @protected
  void sse_encode_ffi_icon_event(FFIIconEvent self, SseSerializer serializer);

  @protected
  void sse_encode_ffi_mouse_button(
      FFIMouseButton self, SseSerializer serializer);

  @protected
  void sse_encode_ffi_mouse_button_state(
      FFIMouseButtonState self, SseSerializer serializer);

  @protected
  void sse_encode_ffi_physical_position(
      FFIPhysicalPosition self, SseSerializer serializer);

  @protected
  void sse_encode_ffi_physical_size(
      FFIPhysicalSize self, SseSerializer serializer);

  @protected
  void sse_encode_ffi_rect(FFIRect self, SseSerializer serializer);

  @protected
  void sse_encode_ffi_sys_tray_event(
      FFISysTrayEvent self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_my_sys_tray_event_enum(
      MySysTrayEventEnum self, SseSerializer serializer);

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_ffi_icon_event(
      FFIIconEvent? self, SseSerializer serializer);

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);
}

// Section: wire_class

class RustLibWire implements BaseWire {
  factory RustLibWire.fromExternalLibrary(ExternalLibrary lib) =>
      RustLibWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustLibWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;
}
