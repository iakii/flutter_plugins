// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.3.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `get_icon_to_win_icon_by_win`, `icon_info_to_entity`, `window_info_to_entity`

/// Retrieves the active window.
///
/// Returns the active window as an `Option` type.
/// If the active window cannot be retrieved, `None` is returned.
///
/// # Example
///
/// ```
/// let active_window = get_active_window().unwrap();
/// ```
WindowIconEntity getCurrentActiveWindow() =>
    RustLib.instance.api.crateApiActiveWindowGetCurrentActiveWindow();

/// Retrieves a list of active windows and their corresponding icons.
///
/// This function uses the `get_open_windows` function to get a list of open windows.
/// It then iterates over the windows and uses the `get_icon_to_win_icon_by_win` function
/// to retrieve the icon for each window. The resulting list of `WindowIconEntity` structs
/// is collected and returned.
///
/// # Returns
///
/// A vector of `WindowIconEntity` structs representing the active windows and their icons.
///
/// # Panics
///
/// This function will panic if there is an error retrieving the open windows.
///
/// # Examples
///
/// ```rust
/// let active_window: Vec<WindowIconEntity> = get_active_windows();
/// ```
List<WindowIconEntity> getAllOpenWindows() =>
    RustLib.instance.api.crateApiActiveWindowGetAllOpenWindows();

IconEntity getWindowIconByWindowId({required int id}) =>
    RustLib.instance.api.crateApiActiveWindowGetWindowIconByWindowId(id: id);

class IconEntity {
  final String data;
  final int height;
  final int width;

  const IconEntity({
    required this.data,
    required this.height,
    required this.width,
  });

  @override
  int get hashCode => data.hashCode ^ height.hashCode ^ width.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is IconEntity &&
          runtimeType == other.runtimeType &&
          data == other.data &&
          height == other.height &&
          width == other.width;
}

class InfoEntity {
  final int processId;
  final String path;
  final String name;
  final String execName;

  const InfoEntity({
    required this.processId,
    required this.path,
    required this.name,
    required this.execName,
  });

  @override
  int get hashCode =>
      processId.hashCode ^ path.hashCode ^ name.hashCode ^ execName.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is InfoEntity &&
          runtimeType == other.runtimeType &&
          processId == other.processId &&
          path == other.path &&
          name == other.name &&
          execName == other.execName;
}

class PositionEntity {
  final int x;
  final int y;
  final int width;
  final int height;
  final bool isFullScreen;

  const PositionEntity({
    required this.x,
    required this.y,
    required this.width,
    required this.height,
    required this.isFullScreen,
  });

  @override
  int get hashCode =>
      x.hashCode ^
      y.hashCode ^
      width.hashCode ^
      height.hashCode ^
      isFullScreen.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is PositionEntity &&
          runtimeType == other.runtimeType &&
          x == other.x &&
          y == other.y &&
          width == other.width &&
          height == other.height &&
          isFullScreen == other.isFullScreen;
}

class UsageEntity {
  final int memory;

  const UsageEntity({
    required this.memory,
  });

  @override
  int get hashCode => memory.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is UsageEntity &&
          runtimeType == other.runtimeType &&
          memory == other.memory;
}

class WindowEntity {
  final int id;
  final String title;
  final PositionEntity position;
  final InfoEntity info;
  final UsageEntity usage;
  final String url;

  const WindowEntity({
    required this.id,
    required this.title,
    required this.position,
    required this.info,
    required this.usage,
    required this.url,
  });

  @override
  int get hashCode =>
      id.hashCode ^
      title.hashCode ^
      position.hashCode ^
      info.hashCode ^
      usage.hashCode ^
      url.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is WindowEntity &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          title == other.title &&
          position == other.position &&
          info == other.info &&
          usage == other.usage &&
          url == other.url;
}

class WindowIconEntity {
  final WindowEntity window;
  final IconEntity icon;

  const WindowIconEntity({
    required this.window,
    required this.icon,
  });

  @override
  int get hashCode => window.hashCode ^ icon.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is WindowIconEntity &&
          runtimeType == other.runtimeType &&
          window == other.window &&
          icon == other.icon;
}
