// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.3.0.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.3.0";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = -2128638823;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__api__system_info__find_pid_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "find_pid",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_name = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::system_info::find_pid(api_name))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__system_info__get_cpus_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_cpus",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::system_info::get_cpus())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__system_info__get_networks_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_networks",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::system_info::get_networks())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__system_info__get_processes_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_processes",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::system_info::get_processes())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__system_info__init_app_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init_app",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::system_info::init_app();
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}

// Section: dart2rust

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for crate::api::entities::CpuEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_vendorId = <String>::sse_decode(deserializer);
        let mut var_brand = <String>::sse_decode(deserializer);
        let mut var_usage = <crate::api::entities::CpuUsageEntity>::sse_decode(deserializer);
        return crate::api::entities::CpuEntity {
            name: var_name,
            vendor_id: var_vendorId,
            brand: var_brand,
            usage: var_usage,
        };
    }
}

impl SseDecode for crate::api::entities::CpuUsageEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_percent = <f32>::sse_decode(deserializer);
        let mut var_frequency = <u64>::sse_decode(deserializer);
        return crate::api::entities::CpuUsageEntity {
            percent: var_percent,
            frequency: var_frequency,
        };
    }
}

impl SseDecode for f32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_f32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::api::entities::IpNetworkEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_ip = <crate::api::entities::IpNetworkType>::sse_decode(deserializer);
        let mut var_prefix = <u8>::sse_decode(deserializer);
        return crate::api::entities::IpNetworkEntity {
            ip: var_ip,
            prefix: var_prefix,
        };
    }
}

impl SseDecode for crate::api::entities::IpNetworkType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::entities::IpNetworkType::IPV4,
            1 => crate::api::entities::IpNetworkType::IPV6,
            _ => unreachable!("Invalid variant for IpNetworkType: {}", inner),
        };
    }
}

impl SseDecode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<String>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::entities::CpuEntity> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::entities::CpuEntity>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::entities::IpNetworkEntity> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::entities::IpNetworkEntity>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::entities::NetWorkEntity> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::entities::NetWorkEntity>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::entities::ProcessEntity> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::entities::ProcessEntity>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for crate::api::entities::NetWorkEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_totalReceived = <u64>::sse_decode(deserializer);
        let mut var_received = <u64>::sse_decode(deserializer);
        let mut var_transmitted = <u64>::sse_decode(deserializer);
        let mut var_totalTransmitted = <u64>::sse_decode(deserializer);
        let mut var_packetsReceived = <u64>::sse_decode(deserializer);
        let mut var_totalPacketsReceived = <u64>::sse_decode(deserializer);
        let mut var_packetsTransmitted = <u64>::sse_decode(deserializer);
        let mut var_totalPacketsTransmitted = <u64>::sse_decode(deserializer);
        let mut var_errorsOnReceived = <u64>::sse_decode(deserializer);
        let mut var_totalErrorsOnReceived = <u64>::sse_decode(deserializer);
        let mut var_errorsOnTransmitted = <u64>::sse_decode(deserializer);
        let mut var_totalErrorsOnTransmitted = <u64>::sse_decode(deserializer);
        let mut var_macAddress = <String>::sse_decode(deserializer);
        let mut var_ipNetworks =
            <Vec<crate::api::entities::IpNetworkEntity>>::sse_decode(deserializer);
        return crate::api::entities::NetWorkEntity {
            name: var_name,
            total_received: var_totalReceived,
            received: var_received,
            transmitted: var_transmitted,
            total_transmitted: var_totalTransmitted,
            packets_received: var_packetsReceived,
            total_packets_received: var_totalPacketsReceived,
            packets_transmitted: var_packetsTransmitted,
            total_packets_transmitted: var_totalPacketsTransmitted,
            errors_on_received: var_errorsOnReceived,
            total_errors_on_received: var_totalErrorsOnReceived,
            errors_on_transmitted: var_errorsOnTransmitted,
            total_errors_on_transmitted: var_totalErrorsOnTransmitted,
            mac_address: var_macAddress,
            ip_networks: var_ipNetworks,
        };
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u32>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::api::entities::ProcessEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_cmd = <Vec<String>>::sse_decode(deserializer);
        let mut var_pid = <u32>::sse_decode(deserializer);
        let mut var_parent = <Option<u32>>::sse_decode(deserializer);
        let mut var_environ = <Vec<String>>::sse_decode(deserializer);
        let mut var_cwd = <Option<String>>::sse_decode(deserializer);
        let mut var_root = <Option<String>>::sse_decode(deserializer);
        let mut var_memory = <u64>::sse_decode(deserializer);
        let mut var_virtualMemory = <u64>::sse_decode(deserializer);
        let mut var_startTime = <u64>::sse_decode(deserializer);
        let mut var_runTime = <u64>::sse_decode(deserializer);
        let mut var_cpuUsage = <f32>::sse_decode(deserializer);
        let mut var_userId = <String>::sse_decode(deserializer);
        let mut var_effectiveUserId = <Option<String>>::sse_decode(deserializer);
        let mut var_groupId = <Option<String>>::sse_decode(deserializer);
        let mut var_effectiveGroupId = <Option<String>>::sse_decode(deserializer);
        let mut var_processStatus =
            <crate::api::entities::ProcessStatusEntity>::sse_decode(deserializer);
        return crate::api::entities::ProcessEntity {
            name: var_name,
            cmd: var_cmd,
            pid: var_pid,
            parent: var_parent,
            environ: var_environ,
            cwd: var_cwd,
            root: var_root,
            memory: var_memory,
            virtual_memory: var_virtualMemory,
            start_time: var_startTime,
            run_time: var_runTime,
            cpu_usage: var_cpuUsage,
            user_id: var_userId,
            effective_user_id: var_effectiveUserId,
            group_id: var_groupId,
            effective_group_id: var_effectiveGroupId,
            process_status: var_processStatus,
        };
    }
}

impl SseDecode for crate::api::entities::ProcessStatusEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::entities::ProcessStatusEntity::Idle;
            }
            1 => {
                return crate::api::entities::ProcessStatusEntity::Run;
            }
            2 => {
                return crate::api::entities::ProcessStatusEntity::Sleep;
            }
            3 => {
                return crate::api::entities::ProcessStatusEntity::Stop;
            }
            4 => {
                return crate::api::entities::ProcessStatusEntity::Zombie;
            }
            5 => {
                return crate::api::entities::ProcessStatusEntity::Tracing;
            }
            6 => {
                return crate::api::entities::ProcessStatusEntity::Dead;
            }
            7 => {
                return crate::api::entities::ProcessStatusEntity::Wakekill;
            }
            8 => {
                return crate::api::entities::ProcessStatusEntity::Waking;
            }
            9 => {
                return crate::api::entities::ProcessStatusEntity::Parked;
            }
            10 => {
                return crate::api::entities::ProcessStatusEntity::LockBlocked;
            }
            11 => {
                return crate::api::entities::ProcessStatusEntity::UninterruptibleDiskSleep;
            }
            12 => {
                let mut var_field0 = <u32>::sse_decode(deserializer);
                return crate::api::entities::ProcessStatusEntity::Unknown(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        5 => wire__crate__api__system_info__init_app_impl(port, ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        1 => wire__crate__api__system_info__find_pid_impl(ptr, rust_vec_len, data_len),
        2 => wire__crate__api__system_info__get_cpus_impl(ptr, rust_vec_len, data_len),
        3 => wire__crate__api__system_info__get_networks_impl(ptr, rust_vec_len, data_len),
        4 => wire__crate__api__system_info__get_processes_impl(ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::entities::CpuEntity {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.name.into_into_dart().into_dart(),
            self.vendor_id.into_into_dart().into_dart(),
            self.brand.into_into_dart().into_dart(),
            self.usage.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::entities::CpuEntity
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::entities::CpuEntity>
    for crate::api::entities::CpuEntity
{
    fn into_into_dart(self) -> crate::api::entities::CpuEntity {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::entities::CpuUsageEntity {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.percent.into_into_dart().into_dart(),
            self.frequency.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::entities::CpuUsageEntity
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::entities::CpuUsageEntity>
    for crate::api::entities::CpuUsageEntity
{
    fn into_into_dart(self) -> crate::api::entities::CpuUsageEntity {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::entities::IpNetworkEntity {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.ip.into_into_dart().into_dart(),
            self.prefix.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::entities::IpNetworkEntity
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::entities::IpNetworkEntity>
    for crate::api::entities::IpNetworkEntity
{
    fn into_into_dart(self) -> crate::api::entities::IpNetworkEntity {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::entities::IpNetworkType {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::IPV4 => 0.into_dart(),
            Self::IPV6 => 1.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::entities::IpNetworkType
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::entities::IpNetworkType>
    for crate::api::entities::IpNetworkType
{
    fn into_into_dart(self) -> crate::api::entities::IpNetworkType {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::entities::NetWorkEntity {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.name.into_into_dart().into_dart(),
            self.total_received.into_into_dart().into_dart(),
            self.received.into_into_dart().into_dart(),
            self.transmitted.into_into_dart().into_dart(),
            self.total_transmitted.into_into_dart().into_dart(),
            self.packets_received.into_into_dart().into_dart(),
            self.total_packets_received.into_into_dart().into_dart(),
            self.packets_transmitted.into_into_dart().into_dart(),
            self.total_packets_transmitted.into_into_dart().into_dart(),
            self.errors_on_received.into_into_dart().into_dart(),
            self.total_errors_on_received.into_into_dart().into_dart(),
            self.errors_on_transmitted.into_into_dart().into_dart(),
            self.total_errors_on_transmitted
                .into_into_dart()
                .into_dart(),
            self.mac_address.into_into_dart().into_dart(),
            self.ip_networks.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::entities::NetWorkEntity
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::entities::NetWorkEntity>
    for crate::api::entities::NetWorkEntity
{
    fn into_into_dart(self) -> crate::api::entities::NetWorkEntity {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::entities::ProcessEntity {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.name.into_into_dart().into_dart(),
            self.cmd.into_into_dart().into_dart(),
            self.pid.into_into_dart().into_dart(),
            self.parent.into_into_dart().into_dart(),
            self.environ.into_into_dart().into_dart(),
            self.cwd.into_into_dart().into_dart(),
            self.root.into_into_dart().into_dart(),
            self.memory.into_into_dart().into_dart(),
            self.virtual_memory.into_into_dart().into_dart(),
            self.start_time.into_into_dart().into_dart(),
            self.run_time.into_into_dart().into_dart(),
            self.cpu_usage.into_into_dart().into_dart(),
            self.user_id.into_into_dart().into_dart(),
            self.effective_user_id.into_into_dart().into_dart(),
            self.group_id.into_into_dart().into_dart(),
            self.effective_group_id.into_into_dart().into_dart(),
            self.process_status.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::entities::ProcessEntity
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::entities::ProcessEntity>
    for crate::api::entities::ProcessEntity
{
    fn into_into_dart(self) -> crate::api::entities::ProcessEntity {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::entities::ProcessStatusEntity {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::entities::ProcessStatusEntity::Idle => [0.into_dart()].into_dart(),
            crate::api::entities::ProcessStatusEntity::Run => [1.into_dart()].into_dart(),
            crate::api::entities::ProcessStatusEntity::Sleep => [2.into_dart()].into_dart(),
            crate::api::entities::ProcessStatusEntity::Stop => [3.into_dart()].into_dart(),
            crate::api::entities::ProcessStatusEntity::Zombie => [4.into_dart()].into_dart(),
            crate::api::entities::ProcessStatusEntity::Tracing => [5.into_dart()].into_dart(),
            crate::api::entities::ProcessStatusEntity::Dead => [6.into_dart()].into_dart(),
            crate::api::entities::ProcessStatusEntity::Wakekill => [7.into_dart()].into_dart(),
            crate::api::entities::ProcessStatusEntity::Waking => [8.into_dart()].into_dart(),
            crate::api::entities::ProcessStatusEntity::Parked => [9.into_dart()].into_dart(),
            crate::api::entities::ProcessStatusEntity::LockBlocked => [10.into_dart()].into_dart(),
            crate::api::entities::ProcessStatusEntity::UninterruptibleDiskSleep => {
                [11.into_dart()].into_dart()
            }
            crate::api::entities::ProcessStatusEntity::Unknown(field0) => {
                [12.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::entities::ProcessStatusEntity
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::entities::ProcessStatusEntity>
    for crate::api::entities::ProcessStatusEntity
{
    fn into_into_dart(self) -> crate::api::entities::ProcessStatusEntity {
        self
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for crate::api::entities::CpuEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <String>::sse_encode(self.vendor_id, serializer);
        <String>::sse_encode(self.brand, serializer);
        <crate::api::entities::CpuUsageEntity>::sse_encode(self.usage, serializer);
    }
}

impl SseEncode for crate::api::entities::CpuUsageEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <f32>::sse_encode(self.percent, serializer);
        <u64>::sse_encode(self.frequency, serializer);
    }
}

impl SseEncode for f32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_f32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for crate::api::entities::IpNetworkEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::entities::IpNetworkType>::sse_encode(self.ip, serializer);
        <u8>::sse_encode(self.prefix, serializer);
    }
}

impl SseEncode for crate::api::entities::IpNetworkType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::entities::IpNetworkType::IPV4 => 0,
                crate::api::entities::IpNetworkType::IPV6 => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <String>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::entities::CpuEntity> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::entities::CpuEntity>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::entities::IpNetworkEntity> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::entities::IpNetworkEntity>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::entities::NetWorkEntity> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::entities::NetWorkEntity>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::entities::ProcessEntity> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::entities::ProcessEntity>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::api::entities::NetWorkEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <u64>::sse_encode(self.total_received, serializer);
        <u64>::sse_encode(self.received, serializer);
        <u64>::sse_encode(self.transmitted, serializer);
        <u64>::sse_encode(self.total_transmitted, serializer);
        <u64>::sse_encode(self.packets_received, serializer);
        <u64>::sse_encode(self.total_packets_received, serializer);
        <u64>::sse_encode(self.packets_transmitted, serializer);
        <u64>::sse_encode(self.total_packets_transmitted, serializer);
        <u64>::sse_encode(self.errors_on_received, serializer);
        <u64>::sse_encode(self.total_errors_on_received, serializer);
        <u64>::sse_encode(self.errors_on_transmitted, serializer);
        <u64>::sse_encode(self.total_errors_on_transmitted, serializer);
        <String>::sse_encode(self.mac_address, serializer);
        <Vec<crate::api::entities::IpNetworkEntity>>::sse_encode(self.ip_networks, serializer);
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<u32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u32>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::api::entities::ProcessEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <Vec<String>>::sse_encode(self.cmd, serializer);
        <u32>::sse_encode(self.pid, serializer);
        <Option<u32>>::sse_encode(self.parent, serializer);
        <Vec<String>>::sse_encode(self.environ, serializer);
        <Option<String>>::sse_encode(self.cwd, serializer);
        <Option<String>>::sse_encode(self.root, serializer);
        <u64>::sse_encode(self.memory, serializer);
        <u64>::sse_encode(self.virtual_memory, serializer);
        <u64>::sse_encode(self.start_time, serializer);
        <u64>::sse_encode(self.run_time, serializer);
        <f32>::sse_encode(self.cpu_usage, serializer);
        <String>::sse_encode(self.user_id, serializer);
        <Option<String>>::sse_encode(self.effective_user_id, serializer);
        <Option<String>>::sse_encode(self.group_id, serializer);
        <Option<String>>::sse_encode(self.effective_group_id, serializer);
        <crate::api::entities::ProcessStatusEntity>::sse_encode(self.process_status, serializer);
    }
}

impl SseEncode for crate::api::entities::ProcessStatusEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::entities::ProcessStatusEntity::Idle => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::entities::ProcessStatusEntity::Run => {
                <i32>::sse_encode(1, serializer);
            }
            crate::api::entities::ProcessStatusEntity::Sleep => {
                <i32>::sse_encode(2, serializer);
            }
            crate::api::entities::ProcessStatusEntity::Stop => {
                <i32>::sse_encode(3, serializer);
            }
            crate::api::entities::ProcessStatusEntity::Zombie => {
                <i32>::sse_encode(4, serializer);
            }
            crate::api::entities::ProcessStatusEntity::Tracing => {
                <i32>::sse_encode(5, serializer);
            }
            crate::api::entities::ProcessStatusEntity::Dead => {
                <i32>::sse_encode(6, serializer);
            }
            crate::api::entities::ProcessStatusEntity::Wakekill => {
                <i32>::sse_encode(7, serializer);
            }
            crate::api::entities::ProcessStatusEntity::Waking => {
                <i32>::sse_encode(8, serializer);
            }
            crate::api::entities::ProcessStatusEntity::Parked => {
                <i32>::sse_encode(9, serializer);
            }
            crate::api::entities::ProcessStatusEntity::LockBlocked => {
                <i32>::sse_encode(10, serializer);
            }
            crate::api::entities::ProcessStatusEntity::UninterruptibleDiskSleep => {
                <i32>::sse_encode(11, serializer);
            }
            crate::api::entities::ProcessStatusEntity::Unknown(field0) => {
                <i32>::sse_encode(12, serializer);
                <u32>::sse_encode(field0, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // Generated by `flutter_rust_bridge`@ 2.3.0.

    // Section: imports

    use super::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_io!();
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    // This file is automatically generated, so please do not edit it.
    // Generated by `flutter_rust_bridge`@ 2.3.0.

    // Section: imports

    use super::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::wasm_bindgen;
    use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_web!();
}
#[cfg(target_family = "wasm")]
pub use web::*;
