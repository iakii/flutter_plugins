// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.3.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/entities.dart';
import 'api/system_info.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiSystemInfoInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.3.0';

  @override
  int get rustContentHash => -2128638823;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'system_infomation',
    ioDirectory: 'library/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  String? crateApiSystemInfoFindPid({required String name});

  List<CpuEntity> crateApiSystemInfoGetCpus();

  List<NetWorkEntity> crateApiSystemInfoGetNetworks();

  List<ProcessEntity> crateApiSystemInfoGetProcesses();

  Future<void> crateApiSystemInfoInitApp();
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  String? crateApiSystemInfoFindPid({required String name}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(name, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSystemInfoFindPidConstMeta,
      argValues: [name],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSystemInfoFindPidConstMeta => const TaskConstMeta(
        debugName: "find_pid",
        argNames: ["name"],
      );

  @override
  List<CpuEntity> crateApiSystemInfoGetCpus() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_cpu_entity,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSystemInfoGetCpusConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSystemInfoGetCpusConstMeta => const TaskConstMeta(
        debugName: "get_cpus",
        argNames: [],
      );

  @override
  List<NetWorkEntity> crateApiSystemInfoGetNetworks() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_net_work_entity,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSystemInfoGetNetworksConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSystemInfoGetNetworksConstMeta =>
      const TaskConstMeta(
        debugName: "get_networks",
        argNames: [],
      );

  @override
  List<ProcessEntity> crateApiSystemInfoGetProcesses() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_process_entity,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSystemInfoGetProcessesConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSystemInfoGetProcessesConstMeta =>
      const TaskConstMeta(
        debugName: "get_processes",
        argNames: [],
      );

  @override
  Future<void> crateApiSystemInfoInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSystemInfoInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSystemInfoInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  CpuEntity dco_decode_cpu_entity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return CpuEntity(
      name: dco_decode_String(arr[0]),
      vendorId: dco_decode_String(arr[1]),
      brand: dco_decode_String(arr[2]),
      usage: dco_decode_cpu_usage_entity(arr[3]),
    );
  }

  @protected
  CpuUsageEntity dco_decode_cpu_usage_entity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return CpuUsageEntity(
      percent: dco_decode_f_32(arr[0]),
      frequency: dco_decode_u_64(arr[1]),
    );
  }

  @protected
  double dco_decode_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  IpNetworkEntity dco_decode_ip_network_entity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return IpNetworkEntity(
      ip: dco_decode_ip_network_type(arr[0]),
      prefix: dco_decode_u_8(arr[1]),
    );
  }

  @protected
  IpNetworkType dco_decode_ip_network_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return IpNetworkType.values[raw as int];
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<CpuEntity> dco_decode_list_cpu_entity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_cpu_entity).toList();
  }

  @protected
  List<IpNetworkEntity> dco_decode_list_ip_network_entity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_ip_network_entity).toList();
  }

  @protected
  List<NetWorkEntity> dco_decode_list_net_work_entity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_net_work_entity).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<ProcessEntity> dco_decode_list_process_entity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_process_entity).toList();
  }

  @protected
  NetWorkEntity dco_decode_net_work_entity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 15)
      throw Exception('unexpected arr length: expect 15 but see ${arr.length}');
    return NetWorkEntity(
      name: dco_decode_String(arr[0]),
      totalReceived: dco_decode_u_64(arr[1]),
      received: dco_decode_u_64(arr[2]),
      transmitted: dco_decode_u_64(arr[3]),
      totalTransmitted: dco_decode_u_64(arr[4]),
      packetsReceived: dco_decode_u_64(arr[5]),
      totalPacketsReceived: dco_decode_u_64(arr[6]),
      packetsTransmitted: dco_decode_u_64(arr[7]),
      totalPacketsTransmitted: dco_decode_u_64(arr[8]),
      errorsOnReceived: dco_decode_u_64(arr[9]),
      totalErrorsOnReceived: dco_decode_u_64(arr[10]),
      errorsOnTransmitted: dco_decode_u_64(arr[11]),
      totalErrorsOnTransmitted: dco_decode_u_64(arr[12]),
      macAddress: dco_decode_String(arr[13]),
      ipNetworks: dco_decode_list_ip_network_entity(arr[14]),
    );
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_32(raw);
  }

  @protected
  ProcessEntity dco_decode_process_entity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 17)
      throw Exception('unexpected arr length: expect 17 but see ${arr.length}');
    return ProcessEntity(
      name: dco_decode_String(arr[0]),
      cmd: dco_decode_list_String(arr[1]),
      pid: dco_decode_u_32(arr[2]),
      parent: dco_decode_opt_box_autoadd_u_32(arr[3]),
      environ: dco_decode_list_String(arr[4]),
      cwd: dco_decode_opt_String(arr[5]),
      root: dco_decode_opt_String(arr[6]),
      memory: dco_decode_u_64(arr[7]),
      virtualMemory: dco_decode_u_64(arr[8]),
      startTime: dco_decode_u_64(arr[9]),
      runTime: dco_decode_u_64(arr[10]),
      cpuUsage: dco_decode_f_32(arr[11]),
      userId: dco_decode_String(arr[12]),
      effectiveUserId: dco_decode_opt_String(arr[13]),
      groupId: dco_decode_opt_String(arr[14]),
      effectiveGroupId: dco_decode_opt_String(arr[15]),
      processStatus: dco_decode_process_status_entity(arr[16]),
    );
  }

  @protected
  ProcessStatusEntity dco_decode_process_status_entity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return ProcessStatusEntity_Idle();
      case 1:
        return ProcessStatusEntity_Run();
      case 2:
        return ProcessStatusEntity_Sleep();
      case 3:
        return ProcessStatusEntity_Stop();
      case 4:
        return ProcessStatusEntity_Zombie();
      case 5:
        return ProcessStatusEntity_Tracing();
      case 6:
        return ProcessStatusEntity_Dead();
      case 7:
        return ProcessStatusEntity_Wakekill();
      case 8:
        return ProcessStatusEntity_Waking();
      case 9:
        return ProcessStatusEntity_Parked();
      case 10:
        return ProcessStatusEntity_LockBlocked();
      case 11:
        return ProcessStatusEntity_UninterruptibleDiskSleep();
      case 12:
        return ProcessStatusEntity_Unknown(
          dco_decode_u_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_32(deserializer));
  }

  @protected
  CpuEntity sse_decode_cpu_entity(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_vendorId = sse_decode_String(deserializer);
    var var_brand = sse_decode_String(deserializer);
    var var_usage = sse_decode_cpu_usage_entity(deserializer);
    return CpuEntity(
        name: var_name,
        vendorId: var_vendorId,
        brand: var_brand,
        usage: var_usage);
  }

  @protected
  CpuUsageEntity sse_decode_cpu_usage_entity(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_percent = sse_decode_f_32(deserializer);
    var var_frequency = sse_decode_u_64(deserializer);
    return CpuUsageEntity(percent: var_percent, frequency: var_frequency);
  }

  @protected
  double sse_decode_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat32();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  IpNetworkEntity sse_decode_ip_network_entity(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_ip = sse_decode_ip_network_type(deserializer);
    var var_prefix = sse_decode_u_8(deserializer);
    return IpNetworkEntity(ip: var_ip, prefix: var_prefix);
  }

  @protected
  IpNetworkType sse_decode_ip_network_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return IpNetworkType.values[inner];
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<CpuEntity> sse_decode_list_cpu_entity(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <CpuEntity>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_cpu_entity(deserializer));
    }
    return ans_;
  }

  @protected
  List<IpNetworkEntity> sse_decode_list_ip_network_entity(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <IpNetworkEntity>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_ip_network_entity(deserializer));
    }
    return ans_;
  }

  @protected
  List<NetWorkEntity> sse_decode_list_net_work_entity(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <NetWorkEntity>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_net_work_entity(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<ProcessEntity> sse_decode_list_process_entity(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ProcessEntity>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_process_entity(deserializer));
    }
    return ans_;
  }

  @protected
  NetWorkEntity sse_decode_net_work_entity(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_totalReceived = sse_decode_u_64(deserializer);
    var var_received = sse_decode_u_64(deserializer);
    var var_transmitted = sse_decode_u_64(deserializer);
    var var_totalTransmitted = sse_decode_u_64(deserializer);
    var var_packetsReceived = sse_decode_u_64(deserializer);
    var var_totalPacketsReceived = sse_decode_u_64(deserializer);
    var var_packetsTransmitted = sse_decode_u_64(deserializer);
    var var_totalPacketsTransmitted = sse_decode_u_64(deserializer);
    var var_errorsOnReceived = sse_decode_u_64(deserializer);
    var var_totalErrorsOnReceived = sse_decode_u_64(deserializer);
    var var_errorsOnTransmitted = sse_decode_u_64(deserializer);
    var var_totalErrorsOnTransmitted = sse_decode_u_64(deserializer);
    var var_macAddress = sse_decode_String(deserializer);
    var var_ipNetworks = sse_decode_list_ip_network_entity(deserializer);
    return NetWorkEntity(
        name: var_name,
        totalReceived: var_totalReceived,
        received: var_received,
        transmitted: var_transmitted,
        totalTransmitted: var_totalTransmitted,
        packetsReceived: var_packetsReceived,
        totalPacketsReceived: var_totalPacketsReceived,
        packetsTransmitted: var_packetsTransmitted,
        totalPacketsTransmitted: var_totalPacketsTransmitted,
        errorsOnReceived: var_errorsOnReceived,
        totalErrorsOnReceived: var_totalErrorsOnReceived,
        errorsOnTransmitted: var_errorsOnTransmitted,
        totalErrorsOnTransmitted: var_totalErrorsOnTransmitted,
        macAddress: var_macAddress,
        ipNetworks: var_ipNetworks);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ProcessEntity sse_decode_process_entity(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_cmd = sse_decode_list_String(deserializer);
    var var_pid = sse_decode_u_32(deserializer);
    var var_parent = sse_decode_opt_box_autoadd_u_32(deserializer);
    var var_environ = sse_decode_list_String(deserializer);
    var var_cwd = sse_decode_opt_String(deserializer);
    var var_root = sse_decode_opt_String(deserializer);
    var var_memory = sse_decode_u_64(deserializer);
    var var_virtualMemory = sse_decode_u_64(deserializer);
    var var_startTime = sse_decode_u_64(deserializer);
    var var_runTime = sse_decode_u_64(deserializer);
    var var_cpuUsage = sse_decode_f_32(deserializer);
    var var_userId = sse_decode_String(deserializer);
    var var_effectiveUserId = sse_decode_opt_String(deserializer);
    var var_groupId = sse_decode_opt_String(deserializer);
    var var_effectiveGroupId = sse_decode_opt_String(deserializer);
    var var_processStatus = sse_decode_process_status_entity(deserializer);
    return ProcessEntity(
        name: var_name,
        cmd: var_cmd,
        pid: var_pid,
        parent: var_parent,
        environ: var_environ,
        cwd: var_cwd,
        root: var_root,
        memory: var_memory,
        virtualMemory: var_virtualMemory,
        startTime: var_startTime,
        runTime: var_runTime,
        cpuUsage: var_cpuUsage,
        userId: var_userId,
        effectiveUserId: var_effectiveUserId,
        groupId: var_groupId,
        effectiveGroupId: var_effectiveGroupId,
        processStatus: var_processStatus);
  }

  @protected
  ProcessStatusEntity sse_decode_process_status_entity(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return ProcessStatusEntity_Idle();
      case 1:
        return ProcessStatusEntity_Run();
      case 2:
        return ProcessStatusEntity_Sleep();
      case 3:
        return ProcessStatusEntity_Stop();
      case 4:
        return ProcessStatusEntity_Zombie();
      case 5:
        return ProcessStatusEntity_Tracing();
      case 6:
        return ProcessStatusEntity_Dead();
      case 7:
        return ProcessStatusEntity_Wakekill();
      case 8:
        return ProcessStatusEntity_Waking();
      case 9:
        return ProcessStatusEntity_Parked();
      case 10:
        return ProcessStatusEntity_LockBlocked();
      case 11:
        return ProcessStatusEntity_UninterruptibleDiskSleep();
      case 12:
        var var_field0 = sse_decode_u_32(deserializer);
        return ProcessStatusEntity_Unknown(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self, serializer);
  }

  @protected
  void sse_encode_cpu_entity(CpuEntity self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.vendorId, serializer);
    sse_encode_String(self.brand, serializer);
    sse_encode_cpu_usage_entity(self.usage, serializer);
  }

  @protected
  void sse_encode_cpu_usage_entity(
      CpuUsageEntity self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_32(self.percent, serializer);
    sse_encode_u_64(self.frequency, serializer);
  }

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat32(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_ip_network_entity(
      IpNetworkEntity self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ip_network_type(self.ip, serializer);
    sse_encode_u_8(self.prefix, serializer);
  }

  @protected
  void sse_encode_ip_network_type(
      IpNetworkType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_cpu_entity(
      List<CpuEntity> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_cpu_entity(item, serializer);
    }
  }

  @protected
  void sse_encode_list_ip_network_entity(
      List<IpNetworkEntity> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_ip_network_entity(item, serializer);
    }
  }

  @protected
  void sse_encode_list_net_work_entity(
      List<NetWorkEntity> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_net_work_entity(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_process_entity(
      List<ProcessEntity> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_process_entity(item, serializer);
    }
  }

  @protected
  void sse_encode_net_work_entity(
      NetWorkEntity self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_u_64(self.totalReceived, serializer);
    sse_encode_u_64(self.received, serializer);
    sse_encode_u_64(self.transmitted, serializer);
    sse_encode_u_64(self.totalTransmitted, serializer);
    sse_encode_u_64(self.packetsReceived, serializer);
    sse_encode_u_64(self.totalPacketsReceived, serializer);
    sse_encode_u_64(self.packetsTransmitted, serializer);
    sse_encode_u_64(self.totalPacketsTransmitted, serializer);
    sse_encode_u_64(self.errorsOnReceived, serializer);
    sse_encode_u_64(self.totalErrorsOnReceived, serializer);
    sse_encode_u_64(self.errorsOnTransmitted, serializer);
    sse_encode_u_64(self.totalErrorsOnTransmitted, serializer);
    sse_encode_String(self.macAddress, serializer);
    sse_encode_list_ip_network_entity(self.ipNetworks, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_32(self, serializer);
    }
  }

  @protected
  void sse_encode_process_entity(ProcessEntity self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_list_String(self.cmd, serializer);
    sse_encode_u_32(self.pid, serializer);
    sse_encode_opt_box_autoadd_u_32(self.parent, serializer);
    sse_encode_list_String(self.environ, serializer);
    sse_encode_opt_String(self.cwd, serializer);
    sse_encode_opt_String(self.root, serializer);
    sse_encode_u_64(self.memory, serializer);
    sse_encode_u_64(self.virtualMemory, serializer);
    sse_encode_u_64(self.startTime, serializer);
    sse_encode_u_64(self.runTime, serializer);
    sse_encode_f_32(self.cpuUsage, serializer);
    sse_encode_String(self.userId, serializer);
    sse_encode_opt_String(self.effectiveUserId, serializer);
    sse_encode_opt_String(self.groupId, serializer);
    sse_encode_opt_String(self.effectiveGroupId, serializer);
    sse_encode_process_status_entity(self.processStatus, serializer);
  }

  @protected
  void sse_encode_process_status_entity(
      ProcessStatusEntity self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case ProcessStatusEntity_Idle():
        sse_encode_i_32(0, serializer);
      case ProcessStatusEntity_Run():
        sse_encode_i_32(1, serializer);
      case ProcessStatusEntity_Sleep():
        sse_encode_i_32(2, serializer);
      case ProcessStatusEntity_Stop():
        sse_encode_i_32(3, serializer);
      case ProcessStatusEntity_Zombie():
        sse_encode_i_32(4, serializer);
      case ProcessStatusEntity_Tracing():
        sse_encode_i_32(5, serializer);
      case ProcessStatusEntity_Dead():
        sse_encode_i_32(6, serializer);
      case ProcessStatusEntity_Wakekill():
        sse_encode_i_32(7, serializer);
      case ProcessStatusEntity_Waking():
        sse_encode_i_32(8, serializer);
      case ProcessStatusEntity_Parked():
        sse_encode_i_32(9, serializer);
      case ProcessStatusEntity_LockBlocked():
        sse_encode_i_32(10, serializer);
      case ProcessStatusEntity_UninterruptibleDiskSleep():
        sse_encode_i_32(11, serializer);
      case ProcessStatusEntity_Unknown(field0: final field0):
        sse_encode_i_32(12, serializer);
        sse_encode_u_32(field0, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }
}
