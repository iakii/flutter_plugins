// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.3.0.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use crate::api::system_clipboard::clipboard::*;
use crate::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

use std::sync::mpsc::Sender;

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.3.0";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = -1617151877;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__api__active_window__window__get_all_open_windows_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_all_open_windows",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::active_window::window::get_all_open_windows())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__active_window__window__get_current_active_window_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_current_active_window",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::active_window::window::get_current_active_window(),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__active_window__window__get_window_icon_by_window_id_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_window_icon_by_window_id",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_id = <u32>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::active_window::window::get_window_icon_by_window_id(api_id),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__application__greet_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "greet",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_name = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::application::greet(api_name))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__application__init_app_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init_app",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::application::init_app();
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__keypress_simulator__simulator__insert_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "insert",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok({
                    crate::api::keypress_simulator::simulator::insert();
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__keypress_simulator__simulator__paste_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "paste",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok({
                    crate::api::keypress_simulator::simulator::paste();
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__system_clipboard__clipboard__Manager_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Manager_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_sender = <Sender<String>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        crate::api::system_clipboard::clipboard::Manager::new(api_sender),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__system_clipboard__clipboard__clipboard_listener_start_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "clipboard_listener_start",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api__dart_callback = decode_DartFn_Inputs_String_Output_String_AnyhowException(
                <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer),
            );
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::system_clipboard::clipboard::clipboard_listener_start(
                                api__dart_callback,
                            )
                            .await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__system_clipboard__clipboard__get_clipboard_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_clipboard_data",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::system_clipboard::clipboard::get_clipboard_data(),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__system_clipboard__clipboard__set_clipboard_data_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "set_clipboard_data",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_data = <crate::api::system_clipboard::clipboard::ClipboardData>::sse_decode(
                &mut deserializer,
            );
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok({
                    crate::api::system_clipboard::clipboard::set_clipboard_data(api_data);
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__system_info__cpus__get_cpus_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_cpus",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::system_info::cpus::get_cpus())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__system_info__networks__get_networks_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_networks",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::system_info::networks::get_networks())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__system_info__process__find_pid_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "find_pid",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_name = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::system_info::process::find_pid(api_name))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__system_info__process__get_processes_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_processes",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::system_info::process::get_processes())?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__system_info__process__kill_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "kill",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_name = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::system_info::process::kill(api_name))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__system_info__system_info__get_system_info_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_system_info",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        crate::api::system_info::system_info::get_system_info(),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__system_info__system_info__system_info_fmt_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "system_info_fmt",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::system_info::system_info::system_info_fmt();
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__system_tray__entity__ffi_sys_tray_event_from_event_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_sys_tray_event_from_event",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_event_type = <crate::api::system_tray::entity::MySysTrayEventEnum>::sse_decode(
                &mut deserializer,
            );
            let api_menu_event_id = <Option<String>>::sse_decode(&mut deserializer);
            let api_tray_event =
                <Option<crate::api::system_tray::entity::FFIIconEvent>>::sse_decode(
                    &mut deserializer,
                );
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        crate::api::system_tray::entity::FFISysTrayEvent::from_event(
                            api_event_type,
                            api_menu_event_id,
                            api_tray_event,
                        ),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__tiny_png__tiny_png__compress_image_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "compress_image",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_path = <String>::sse_decode(&mut deserializer);
            let api_quality = <u8>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::tiny_png::tiny_png::compress_image(api_path, api_quality);
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__tiny_png__tiny_png__parse_jpg_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "parse_jpg",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_path = <String>::sse_decode(&mut deserializer);
            let api_output = <String>::sse_decode(&mut deserializer);
            let api_quality = <u8>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::tiny_png::tiny_png::parse_jpg(
                            api_path,
                            api_output,
                            api_quality,
                        );
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__tiny_png__tiny_png__parse_png_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "parse_png",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_path = <String>::sse_decode(&mut deserializer);
            let api_output = <String>::sse_decode(&mut deserializer);
            let api_level = <u8>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::tiny_png::tiny_png::parse_png(api_path, api_output, api_level);
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__tiny_png__tiny_png__parse_webp_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "parse_webp",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_path = <String>::sse_decode(&mut deserializer);
            let api_output = <String>::sse_decode(&mut deserializer);
            let api_quality = <f32>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::tiny_png::tiny_png::parse_webp(
                            api_path,
                            api_output,
                            api_quality,
                        );
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}

// Section: related_funcs

fn decode_DartFn_Inputs_String_Output_String_AnyhowException(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn(String) -> flutter_rust_bridge::DartFnFuture<String> {
    use flutter_rust_bridge::IntoDart;

    async fn body(dart_opaque: flutter_rust_bridge::DartOpaque, arg0: String) -> String {
        let args = vec![arg0.into_into_dart().into_dart()];
        let message = FLUTTER_RUST_BRIDGE_HANDLER
            .dart_fn_invoke(dart_opaque, args)
            .await;

        let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
        let action = deserializer.cursor.read_u8().unwrap();
        let ans = match action {
            0 => std::result::Result::Ok(<String>::sse_decode(&mut deserializer)),
            1 => std::result::Result::Err(
                <flutter_rust_bridge::for_generated::anyhow::Error>::sse_decode(&mut deserializer),
            ),
            _ => unreachable!(),
        };
        deserializer.end();
        let ans = ans.expect("Dart throws exception but Rust side assume it is not failable");
        ans
    }

    move |arg0: String| {
        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(
            dart_opaque.clone(),
            arg0,
        ))
    }
}
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Manager>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Sender<String>>
);

// Section: dart2rust

impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::anyhow::anyhow!("{}", inner);
    }
}

impl SseDecode for Manager {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Manager>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for Sender<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Sender<String>>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for flutter_rust_bridge::DartOpaque {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { flutter_rust_bridge::for_generated::sse_decode_dart_opaque(inner) };
    }
}

impl SseDecode for std::collections::HashMap<String, Option<String>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(String, Option<String>)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for std::collections::HashMap<String, u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(String, u64)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Manager>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Sender<String>>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::api::system_clipboard::clipboard::ClipboardData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_dataType =
            <crate::api::system_clipboard::clipboard::DataType>::sse_decode(deserializer);
        let mut var_content = <Option<String>>::sse_decode(deserializer);
        let mut var_image =
            <Option<crate::api::system_clipboard::clipboard::CPImage>>::sse_decode(deserializer);
        let mut var_paths = <Option<Vec<String>>>::sse_decode(deserializer);
        let mut var_icon = <Option<String>>::sse_decode(deserializer);
        let mut var_appName = <Option<String>>::sse_decode(deserializer);
        return crate::api::system_clipboard::clipboard::ClipboardData {
            data_type: var_dataType,
            content: var_content,
            image: var_image,
            paths: var_paths,
            icon: var_icon,
            app_name: var_appName,
        };
    }
}

impl SseDecode for crate::api::system_clipboard::clipboard::CPImage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_width = <u32>::sse_decode(deserializer);
        let mut var_height = <u32>::sse_decode(deserializer);
        let mut var_bytes = <Vec<u8>>::sse_decode(deserializer);
        return crate::api::system_clipboard::clipboard::CPImage {
            width: var_width,
            height: var_height,
            bytes: var_bytes,
        };
    }
}

impl SseDecode for crate::api::system_info::entity::CpuEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_vendorId = <String>::sse_decode(deserializer);
        let mut var_brand = <String>::sse_decode(deserializer);
        let mut var_usage =
            <crate::api::system_info::entity::CpuUsageEntity>::sse_decode(deserializer);
        return crate::api::system_info::entity::CpuEntity {
            name: var_name,
            vendor_id: var_vendorId,
            brand: var_brand,
            usage: var_usage,
        };
    }
}

impl SseDecode for crate::api::system_info::entity::CpuUsageEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_percent = <f32>::sse_decode(deserializer);
        let mut var_frequency = <u64>::sse_decode(deserializer);
        return crate::api::system_info::entity::CpuUsageEntity {
            percent: var_percent,
            frequency: var_frequency,
        };
    }
}

impl SseDecode for crate::api::system_clipboard::clipboard::DataType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::system_clipboard::clipboard::DataType::FILE,
            1 => crate::api::system_clipboard::clipboard::DataType::TEXT,
            2 => crate::api::system_clipboard::clipboard::DataType::IMAGE,
            _ => unreachable!("Invalid variant for DataType: {}", inner),
        };
    }
}

impl SseDecode for f32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_f32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_f64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::api::system_tray::entity::FFIIconEvent {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_id = <String>::sse_decode(deserializer);
                let mut var_position =
                    <crate::api::system_tray::entity::FFIPhysicalPosition>::sse_decode(
                        deserializer,
                    );
                let mut var_rect =
                    <crate::api::system_tray::entity::FFIRect>::sse_decode(deserializer);
                let mut var_button =
                    <crate::api::system_tray::entity::FFIMouseButton>::sse_decode(deserializer);
                let mut var_buttonState =
                    <crate::api::system_tray::entity::FFIMouseButtonState>::sse_decode(
                        deserializer,
                    );
                return crate::api::system_tray::entity::FFIIconEvent::Click {
                    id: var_id,
                    position: var_position,
                    rect: var_rect,
                    button: var_button,
                    button_state: var_buttonState,
                };
            }
            1 => {
                let mut var_id = <String>::sse_decode(deserializer);
                let mut var_position =
                    <crate::api::system_tray::entity::FFIPhysicalPosition>::sse_decode(
                        deserializer,
                    );
                let mut var_rect =
                    <crate::api::system_tray::entity::FFIRect>::sse_decode(deserializer);
                let mut var_button =
                    <crate::api::system_tray::entity::FFIMouseButton>::sse_decode(deserializer);
                return crate::api::system_tray::entity::FFIIconEvent::DoubleClick {
                    id: var_id,
                    position: var_position,
                    rect: var_rect,
                    button: var_button,
                };
            }
            2 => {
                let mut var_id = <String>::sse_decode(deserializer);
                let mut var_position =
                    <crate::api::system_tray::entity::FFIPhysicalPosition>::sse_decode(
                        deserializer,
                    );
                let mut var_rect =
                    <crate::api::system_tray::entity::FFIRect>::sse_decode(deserializer);
                return crate::api::system_tray::entity::FFIIconEvent::Enter {
                    id: var_id,
                    position: var_position,
                    rect: var_rect,
                };
            }
            3 => {
                let mut var_id = <String>::sse_decode(deserializer);
                let mut var_position =
                    <crate::api::system_tray::entity::FFIPhysicalPosition>::sse_decode(
                        deserializer,
                    );
                let mut var_rect =
                    <crate::api::system_tray::entity::FFIRect>::sse_decode(deserializer);
                return crate::api::system_tray::entity::FFIIconEvent::Move {
                    id: var_id,
                    position: var_position,
                    rect: var_rect,
                };
            }
            4 => {
                let mut var_id = <String>::sse_decode(deserializer);
                let mut var_position =
                    <crate::api::system_tray::entity::FFIPhysicalPosition>::sse_decode(
                        deserializer,
                    );
                let mut var_rect =
                    <crate::api::system_tray::entity::FFIRect>::sse_decode(deserializer);
                return crate::api::system_tray::entity::FFIIconEvent::Leave {
                    id: var_id,
                    position: var_position,
                    rect: var_rect,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::system_tray::entity::FFIMouseButton {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::system_tray::entity::FFIMouseButton::Left,
            1 => crate::api::system_tray::entity::FFIMouseButton::Right,
            2 => crate::api::system_tray::entity::FFIMouseButton::Middle,
            _ => unreachable!("Invalid variant for FFIMouseButton: {}", inner),
        };
    }
}

impl SseDecode for crate::api::system_tray::entity::FFIMouseButtonState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::system_tray::entity::FFIMouseButtonState::Up,
            1 => crate::api::system_tray::entity::FFIMouseButtonState::Down,
            _ => unreachable!("Invalid variant for FFIMouseButtonState: {}", inner),
        };
    }
}

impl SseDecode for crate::api::system_tray::entity::FFIPhysicalPosition {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_x = <f64>::sse_decode(deserializer);
        let mut var_y = <f64>::sse_decode(deserializer);
        return crate::api::system_tray::entity::FFIPhysicalPosition { x: var_x, y: var_y };
    }
}

impl SseDecode for crate::api::system_tray::entity::FFIPhysicalSize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_width = <u32>::sse_decode(deserializer);
        let mut var_height = <u32>::sse_decode(deserializer);
        return crate::api::system_tray::entity::FFIPhysicalSize {
            width: var_width,
            height: var_height,
        };
    }
}

impl SseDecode for crate::api::system_tray::entity::FFIRect {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_size =
            <crate::api::system_tray::entity::FFIPhysicalSize>::sse_decode(deserializer);
        let mut var_position =
            <crate::api::system_tray::entity::FFIPhysicalPosition>::sse_decode(deserializer);
        return crate::api::system_tray::entity::FFIRect {
            size: var_size,
            position: var_position,
        };
    }
}

impl SseDecode for crate::api::system_tray::entity::FFISysTrayEvent {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_eventType =
            <crate::api::system_tray::entity::MySysTrayEventEnum>::sse_decode(deserializer);
        let mut var_menuEventId = <Option<String>>::sse_decode(deserializer);
        let mut var_trayEvent =
            <Option<crate::api::system_tray::entity::FFIIconEvent>>::sse_decode(deserializer);
        return crate::api::system_tray::entity::FFISysTrayEvent {
            event_type: var_eventType,
            menu_event_id: var_menuEventId,
            tray_event: var_trayEvent,
        };
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::api::active_window::window::IconEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_data = <String>::sse_decode(deserializer);
        let mut var_height = <u32>::sse_decode(deserializer);
        let mut var_width = <u32>::sse_decode(deserializer);
        return crate::api::active_window::window::IconEntity {
            data: var_data,
            height: var_height,
            width: var_width,
        };
    }
}

impl SseDecode for crate::api::active_window::window::InfoEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_processId = <u32>::sse_decode(deserializer);
        let mut var_path = <String>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_execName = <String>::sse_decode(deserializer);
        return crate::api::active_window::window::InfoEntity {
            process_id: var_processId,
            path: var_path,
            name: var_name,
            exec_name: var_execName,
        };
    }
}

impl SseDecode for crate::api::system_info::entity::IpNetworkEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_ip = <crate::api::system_info::entity::IpNetworkType>::sse_decode(deserializer);
        let mut var_prefix = <u8>::sse_decode(deserializer);
        return crate::api::system_info::entity::IpNetworkEntity {
            ip: var_ip,
            prefix: var_prefix,
        };
    }
}

impl SseDecode for crate::api::system_info::entity::IpNetworkType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::system_info::entity::IpNetworkType::IPV4,
            1 => crate::api::system_info::entity::IpNetworkType::IPV6,
            _ => unreachable!("Invalid variant for IpNetworkType: {}", inner),
        };
    }
}

impl SseDecode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<String>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::system_info::entity::CpuEntity> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::system_info::entity::CpuEntity>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::system_info::entity::IpNetworkEntity> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::system_info::entity::IpNetworkEntity>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::system_info::entity::NetWorkEntity> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::system_info::entity::NetWorkEntity>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::system_info::entity::ProcessEntity> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::system_info::entity::ProcessEntity>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(String, Option<String>)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(String, Option<String>)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(String, u64)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(String, u64)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::active_window::window::WindowIconEntity> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::active_window::window::WindowIconEntity>::sse_decode(deserializer),
            );
        }
        return ans_;
    }
}

impl SseDecode for crate::api::system_tray::entity::MySysTrayEventEnum {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::system_tray::entity::MySysTrayEventEnum::MENU,
            1 => crate::api::system_tray::entity::MySysTrayEventEnum::TRAY,
            2 => crate::api::system_tray::entity::MySysTrayEventEnum::NONE,
            _ => unreachable!("Invalid variant for MySysTrayEventEnum: {}", inner),
        };
    }
}

impl SseDecode for crate::api::system_info::entity::NetWorkEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_totalReceived = <u64>::sse_decode(deserializer);
        let mut var_received = <u64>::sse_decode(deserializer);
        let mut var_transmitted = <u64>::sse_decode(deserializer);
        let mut var_totalTransmitted = <u64>::sse_decode(deserializer);
        let mut var_packetsReceived = <u64>::sse_decode(deserializer);
        let mut var_totalPacketsReceived = <u64>::sse_decode(deserializer);
        let mut var_packetsTransmitted = <u64>::sse_decode(deserializer);
        let mut var_totalPacketsTransmitted = <u64>::sse_decode(deserializer);
        let mut var_errorsOnReceived = <u64>::sse_decode(deserializer);
        let mut var_totalErrorsOnReceived = <u64>::sse_decode(deserializer);
        let mut var_errorsOnTransmitted = <u64>::sse_decode(deserializer);
        let mut var_totalErrorsOnTransmitted = <u64>::sse_decode(deserializer);
        let mut var_macAddress = <String>::sse_decode(deserializer);
        let mut var_ipNetworks =
            <Vec<crate::api::system_info::entity::IpNetworkEntity>>::sse_decode(deserializer);
        return crate::api::system_info::entity::NetWorkEntity {
            name: var_name,
            total_received: var_totalReceived,
            received: var_received,
            transmitted: var_transmitted,
            total_transmitted: var_totalTransmitted,
            packets_received: var_packetsReceived,
            total_packets_received: var_totalPacketsReceived,
            packets_transmitted: var_packetsTransmitted,
            total_packets_transmitted: var_totalPacketsTransmitted,
            errors_on_received: var_errorsOnReceived,
            total_errors_on_received: var_totalErrorsOnReceived,
            errors_on_transmitted: var_errorsOnTransmitted,
            total_errors_on_transmitted: var_totalErrorsOnTransmitted,
            mac_address: var_macAddress,
            ip_networks: var_ipNetworks,
        };
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::system_clipboard::clipboard::CPImage> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(
                <crate::api::system_clipboard::clipboard::CPImage>::sse_decode(deserializer),
            );
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::system_tray::entity::FFIIconEvent> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::system_tray::entity::FFIIconEvent>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u32>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<String>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<String>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::api::active_window::window::PositionEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_x = <i32>::sse_decode(deserializer);
        let mut var_y = <i32>::sse_decode(deserializer);
        let mut var_width = <i32>::sse_decode(deserializer);
        let mut var_height = <i32>::sse_decode(deserializer);
        let mut var_isFullScreen = <bool>::sse_decode(deserializer);
        return crate::api::active_window::window::PositionEntity {
            x: var_x,
            y: var_y,
            width: var_width,
            height: var_height,
            is_full_screen: var_isFullScreen,
        };
    }
}

impl SseDecode for crate::api::system_info::entity::ProcessEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_cmd = <Vec<String>>::sse_decode(deserializer);
        let mut var_pid = <u32>::sse_decode(deserializer);
        let mut var_parent = <Option<u32>>::sse_decode(deserializer);
        let mut var_environ = <Vec<String>>::sse_decode(deserializer);
        let mut var_cwd = <Option<String>>::sse_decode(deserializer);
        let mut var_root = <Option<String>>::sse_decode(deserializer);
        let mut var_memory = <u64>::sse_decode(deserializer);
        let mut var_virtualMemory = <u64>::sse_decode(deserializer);
        let mut var_startTime = <u64>::sse_decode(deserializer);
        let mut var_runTime = <u64>::sse_decode(deserializer);
        let mut var_cpuUsage = <f32>::sse_decode(deserializer);
        let mut var_userId = <String>::sse_decode(deserializer);
        let mut var_effectiveUserId = <Option<String>>::sse_decode(deserializer);
        let mut var_groupId = <Option<String>>::sse_decode(deserializer);
        let mut var_effectiveGroupId = <Option<String>>::sse_decode(deserializer);
        let mut var_processStatus =
            <crate::api::system_info::entity::ProcessStatusEntity>::sse_decode(deserializer);
        return crate::api::system_info::entity::ProcessEntity {
            name: var_name,
            cmd: var_cmd,
            pid: var_pid,
            parent: var_parent,
            environ: var_environ,
            cwd: var_cwd,
            root: var_root,
            memory: var_memory,
            virtual_memory: var_virtualMemory,
            start_time: var_startTime,
            run_time: var_runTime,
            cpu_usage: var_cpuUsage,
            user_id: var_userId,
            effective_user_id: var_effectiveUserId,
            group_id: var_groupId,
            effective_group_id: var_effectiveGroupId,
            process_status: var_processStatus,
        };
    }
}

impl SseDecode for crate::api::system_info::entity::ProcessStatusEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::system_info::entity::ProcessStatusEntity::Idle;
            }
            1 => {
                return crate::api::system_info::entity::ProcessStatusEntity::Run;
            }
            2 => {
                return crate::api::system_info::entity::ProcessStatusEntity::Sleep;
            }
            3 => {
                return crate::api::system_info::entity::ProcessStatusEntity::Stop;
            }
            4 => {
                return crate::api::system_info::entity::ProcessStatusEntity::Zombie;
            }
            5 => {
                return crate::api::system_info::entity::ProcessStatusEntity::Tracing;
            }
            6 => {
                return crate::api::system_info::entity::ProcessStatusEntity::Dead;
            }
            7 => {
                return crate::api::system_info::entity::ProcessStatusEntity::Wakekill;
            }
            8 => {
                return crate::api::system_info::entity::ProcessStatusEntity::Waking;
            }
            9 => {
                return crate::api::system_info::entity::ProcessStatusEntity::Parked;
            }
            10 => {
                return crate::api::system_info::entity::ProcessStatusEntity::LockBlocked;
            }
            11 => {
                return crate::api::system_info::entity::ProcessStatusEntity::UninterruptibleDiskSleep;
            }
            12 => {
                let mut var_field0 = <u32>::sse_decode(deserializer);
                return crate::api::system_info::entity::ProcessStatusEntity::Unknown(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode
    for (
        std::collections::HashMap<String, u64>,
        std::collections::HashMap<String, Option<String>>,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <std::collections::HashMap<String, u64>>::sse_decode(deserializer);
        let mut var_field1 =
            <std::collections::HashMap<String, Option<String>>>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (String, Option<String>) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <Option<String>>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (String, u64) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <u64>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for crate::api::active_window::window::UsageEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_memory = <u32>::sse_decode(deserializer);
        return crate::api::active_window::window::UsageEntity { memory: var_memory };
    }
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

impl SseDecode for crate::api::active_window::window::WindowEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <u32>::sse_decode(deserializer);
        let mut var_title = <String>::sse_decode(deserializer);
        let mut var_position =
            <crate::api::active_window::window::PositionEntity>::sse_decode(deserializer);
        let mut var_info =
            <crate::api::active_window::window::InfoEntity>::sse_decode(deserializer);
        let mut var_usage =
            <crate::api::active_window::window::UsageEntity>::sse_decode(deserializer);
        let mut var_url = <String>::sse_decode(deserializer);
        return crate::api::active_window::window::WindowEntity {
            id: var_id,
            title: var_title,
            position: var_position,
            info: var_info,
            usage: var_usage,
            url: var_url,
        };
    }
}

impl SseDecode for crate::api::active_window::window::WindowIconEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_window =
            <crate::api::active_window::window::WindowEntity>::sse_decode(deserializer);
        let mut var_icon =
            <crate::api::active_window::window::IconEntity>::sse_decode(deserializer);
        return crate::api::active_window::window::WindowIconEntity {
            window: var_window,
            icon: var_icon,
        };
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        5 => wire__crate__api__application__init_app_impl(port, ptr, rust_vec_len, data_len),
        8 => wire__crate__api__system_clipboard__clipboard__Manager_new_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        9 => wire__crate__api__system_clipboard__clipboard__clipboard_listener_start_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        14 => {
            wire__crate__api__system_info__process__find_pid_impl(port, ptr, rust_vec_len, data_len)
        }
        17 => wire__crate__api__system_info__system_info__get_system_info_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        18 => wire__crate__api__system_info__system_info__system_info_fmt_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        19 => wire__crate__api__system_tray__entity__ffi_sys_tray_event_from_event_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        20 => wire__crate__api__tiny_png__tiny_png__compress_image_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        21 => {
            wire__crate__api__tiny_png__tiny_png__parse_jpg_impl(port, ptr, rust_vec_len, data_len)
        }
        22 => {
            wire__crate__api__tiny_png__tiny_png__parse_png_impl(port, ptr, rust_vec_len, data_len)
        }
        23 => {
            wire__crate__api__tiny_png__tiny_png__parse_webp_impl(port, ptr, rust_vec_len, data_len)
        }
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        1 => wire__crate__api__active_window__window__get_all_open_windows_impl(
            ptr,
            rust_vec_len,
            data_len,
        ),
        2 => wire__crate__api__active_window__window__get_current_active_window_impl(
            ptr,
            rust_vec_len,
            data_len,
        ),
        3 => wire__crate__api__active_window__window__get_window_icon_by_window_id_impl(
            ptr,
            rust_vec_len,
            data_len,
        ),
        4 => wire__crate__api__application__greet_impl(ptr, rust_vec_len, data_len),
        6 => wire__crate__api__keypress_simulator__simulator__insert_impl(
            ptr,
            rust_vec_len,
            data_len,
        ),
        7 => {
            wire__crate__api__keypress_simulator__simulator__paste_impl(ptr, rust_vec_len, data_len)
        }
        10 => wire__crate__api__system_clipboard__clipboard__get_clipboard_data_impl(
            ptr,
            rust_vec_len,
            data_len,
        ),
        11 => wire__crate__api__system_clipboard__clipboard__set_clipboard_data_impl(
            ptr,
            rust_vec_len,
            data_len,
        ),
        12 => wire__crate__api__system_info__cpus__get_cpus_impl(ptr, rust_vec_len, data_len),
        13 => {
            wire__crate__api__system_info__networks__get_networks_impl(ptr, rust_vec_len, data_len)
        }
        15 => {
            wire__crate__api__system_info__process__get_processes_impl(ptr, rust_vec_len, data_len)
        }
        16 => wire__crate__api__system_info__process__kill_impl(ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<Manager> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<Manager> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Manager>> for Manager {
    fn into_into_dart(self) -> FrbWrapper<Manager> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<Sender<String>> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<Sender<String>> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Sender<String>>> for Sender<String> {
    fn into_into_dart(self) -> FrbWrapper<Sender<String>> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::system_clipboard::clipboard::ClipboardData {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.data_type.into_into_dart().into_dart(),
            self.content.into_into_dart().into_dart(),
            self.image.into_into_dart().into_dart(),
            self.paths.into_into_dart().into_dart(),
            self.icon.into_into_dart().into_dart(),
            self.app_name.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::system_clipboard::clipboard::ClipboardData
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::system_clipboard::clipboard::ClipboardData>
    for crate::api::system_clipboard::clipboard::ClipboardData
{
    fn into_into_dart(self) -> crate::api::system_clipboard::clipboard::ClipboardData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::system_clipboard::clipboard::CPImage {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.width.into_into_dart().into_dart(),
            self.height.into_into_dart().into_dart(),
            self.bytes.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::system_clipboard::clipboard::CPImage
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::system_clipboard::clipboard::CPImage>
    for crate::api::system_clipboard::clipboard::CPImage
{
    fn into_into_dart(self) -> crate::api::system_clipboard::clipboard::CPImage {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::system_info::entity::CpuEntity {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.name.into_into_dart().into_dart(),
            self.vendor_id.into_into_dart().into_dart(),
            self.brand.into_into_dart().into_dart(),
            self.usage.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::system_info::entity::CpuEntity
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::system_info::entity::CpuEntity>
    for crate::api::system_info::entity::CpuEntity
{
    fn into_into_dart(self) -> crate::api::system_info::entity::CpuEntity {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::system_info::entity::CpuUsageEntity {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.percent.into_into_dart().into_dart(),
            self.frequency.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::system_info::entity::CpuUsageEntity
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::system_info::entity::CpuUsageEntity>
    for crate::api::system_info::entity::CpuUsageEntity
{
    fn into_into_dart(self) -> crate::api::system_info::entity::CpuUsageEntity {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::system_clipboard::clipboard::DataType {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::FILE => 0.into_dart(),
            Self::TEXT => 1.into_dart(),
            Self::IMAGE => 2.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::system_clipboard::clipboard::DataType
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::system_clipboard::clipboard::DataType>
    for crate::api::system_clipboard::clipboard::DataType
{
    fn into_into_dart(self) -> crate::api::system_clipboard::clipboard::DataType {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::system_tray::entity::FFIIconEvent {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::system_tray::entity::FFIIconEvent::Click {
                id,
                position,
                rect,
                button,
                button_state,
            } => [
                0.into_dart(),
                id.into_into_dart().into_dart(),
                position.into_into_dart().into_dart(),
                rect.into_into_dart().into_dart(),
                button.into_into_dart().into_dart(),
                button_state.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::system_tray::entity::FFIIconEvent::DoubleClick {
                id,
                position,
                rect,
                button,
            } => [
                1.into_dart(),
                id.into_into_dart().into_dart(),
                position.into_into_dart().into_dart(),
                rect.into_into_dart().into_dart(),
                button.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::system_tray::entity::FFIIconEvent::Enter { id, position, rect } => [
                2.into_dart(),
                id.into_into_dart().into_dart(),
                position.into_into_dart().into_dart(),
                rect.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::system_tray::entity::FFIIconEvent::Move { id, position, rect } => [
                3.into_dart(),
                id.into_into_dart().into_dart(),
                position.into_into_dart().into_dart(),
                rect.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::system_tray::entity::FFIIconEvent::Leave { id, position, rect } => [
                4.into_dart(),
                id.into_into_dart().into_dart(),
                position.into_into_dart().into_dart(),
                rect.into_into_dart().into_dart(),
            ]
            .into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::system_tray::entity::FFIIconEvent
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::system_tray::entity::FFIIconEvent>
    for crate::api::system_tray::entity::FFIIconEvent
{
    fn into_into_dart(self) -> crate::api::system_tray::entity::FFIIconEvent {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::system_tray::entity::FFIMouseButton {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Left => 0.into_dart(),
            Self::Right => 1.into_dart(),
            Self::Middle => 2.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::system_tray::entity::FFIMouseButton
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::system_tray::entity::FFIMouseButton>
    for crate::api::system_tray::entity::FFIMouseButton
{
    fn into_into_dart(self) -> crate::api::system_tray::entity::FFIMouseButton {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::system_tray::entity::FFIMouseButtonState {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Up => 0.into_dart(),
            Self::Down => 1.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::system_tray::entity::FFIMouseButtonState
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::system_tray::entity::FFIMouseButtonState>
    for crate::api::system_tray::entity::FFIMouseButtonState
{
    fn into_into_dart(self) -> crate::api::system_tray::entity::FFIMouseButtonState {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::system_tray::entity::FFIPhysicalPosition {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.x.into_into_dart().into_dart(),
            self.y.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::system_tray::entity::FFIPhysicalPosition
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::system_tray::entity::FFIPhysicalPosition>
    for crate::api::system_tray::entity::FFIPhysicalPosition
{
    fn into_into_dart(self) -> crate::api::system_tray::entity::FFIPhysicalPosition {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::system_tray::entity::FFIPhysicalSize {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.width.into_into_dart().into_dart(),
            self.height.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::system_tray::entity::FFIPhysicalSize
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::system_tray::entity::FFIPhysicalSize>
    for crate::api::system_tray::entity::FFIPhysicalSize
{
    fn into_into_dart(self) -> crate::api::system_tray::entity::FFIPhysicalSize {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::system_tray::entity::FFIRect {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.size.into_into_dart().into_dart(),
            self.position.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::system_tray::entity::FFIRect
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::system_tray::entity::FFIRect>
    for crate::api::system_tray::entity::FFIRect
{
    fn into_into_dart(self) -> crate::api::system_tray::entity::FFIRect {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::system_tray::entity::FFISysTrayEvent {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.event_type.into_into_dart().into_dart(),
            self.menu_event_id.into_into_dart().into_dart(),
            self.tray_event.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::system_tray::entity::FFISysTrayEvent
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::system_tray::entity::FFISysTrayEvent>
    for crate::api::system_tray::entity::FFISysTrayEvent
{
    fn into_into_dart(self) -> crate::api::system_tray::entity::FFISysTrayEvent {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::active_window::window::IconEntity {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.data.into_into_dart().into_dart(),
            self.height.into_into_dart().into_dart(),
            self.width.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::active_window::window::IconEntity
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::active_window::window::IconEntity>
    for crate::api::active_window::window::IconEntity
{
    fn into_into_dart(self) -> crate::api::active_window::window::IconEntity {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::active_window::window::InfoEntity {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.process_id.into_into_dart().into_dart(),
            self.path.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.exec_name.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::active_window::window::InfoEntity
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::active_window::window::InfoEntity>
    for crate::api::active_window::window::InfoEntity
{
    fn into_into_dart(self) -> crate::api::active_window::window::InfoEntity {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::system_info::entity::IpNetworkEntity {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.ip.into_into_dart().into_dart(),
            self.prefix.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::system_info::entity::IpNetworkEntity
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::system_info::entity::IpNetworkEntity>
    for crate::api::system_info::entity::IpNetworkEntity
{
    fn into_into_dart(self) -> crate::api::system_info::entity::IpNetworkEntity {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::system_info::entity::IpNetworkType {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::IPV4 => 0.into_dart(),
            Self::IPV6 => 1.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::system_info::entity::IpNetworkType
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::system_info::entity::IpNetworkType>
    for crate::api::system_info::entity::IpNetworkType
{
    fn into_into_dart(self) -> crate::api::system_info::entity::IpNetworkType {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::system_tray::entity::MySysTrayEventEnum {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::MENU => 0.into_dart(),
            Self::TRAY => 1.into_dart(),
            Self::NONE => 2.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::system_tray::entity::MySysTrayEventEnum
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::system_tray::entity::MySysTrayEventEnum>
    for crate::api::system_tray::entity::MySysTrayEventEnum
{
    fn into_into_dart(self) -> crate::api::system_tray::entity::MySysTrayEventEnum {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::system_info::entity::NetWorkEntity {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.name.into_into_dart().into_dart(),
            self.total_received.into_into_dart().into_dart(),
            self.received.into_into_dart().into_dart(),
            self.transmitted.into_into_dart().into_dart(),
            self.total_transmitted.into_into_dart().into_dart(),
            self.packets_received.into_into_dart().into_dart(),
            self.total_packets_received.into_into_dart().into_dart(),
            self.packets_transmitted.into_into_dart().into_dart(),
            self.total_packets_transmitted.into_into_dart().into_dart(),
            self.errors_on_received.into_into_dart().into_dart(),
            self.total_errors_on_received.into_into_dart().into_dart(),
            self.errors_on_transmitted.into_into_dart().into_dart(),
            self.total_errors_on_transmitted
                .into_into_dart()
                .into_dart(),
            self.mac_address.into_into_dart().into_dart(),
            self.ip_networks.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::system_info::entity::NetWorkEntity
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::system_info::entity::NetWorkEntity>
    for crate::api::system_info::entity::NetWorkEntity
{
    fn into_into_dart(self) -> crate::api::system_info::entity::NetWorkEntity {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::active_window::window::PositionEntity {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.x.into_into_dart().into_dart(),
            self.y.into_into_dart().into_dart(),
            self.width.into_into_dart().into_dart(),
            self.height.into_into_dart().into_dart(),
            self.is_full_screen.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::active_window::window::PositionEntity
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::active_window::window::PositionEntity>
    for crate::api::active_window::window::PositionEntity
{
    fn into_into_dart(self) -> crate::api::active_window::window::PositionEntity {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::system_info::entity::ProcessEntity {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.name.into_into_dart().into_dart(),
            self.cmd.into_into_dart().into_dart(),
            self.pid.into_into_dart().into_dart(),
            self.parent.into_into_dart().into_dart(),
            self.environ.into_into_dart().into_dart(),
            self.cwd.into_into_dart().into_dart(),
            self.root.into_into_dart().into_dart(),
            self.memory.into_into_dart().into_dart(),
            self.virtual_memory.into_into_dart().into_dart(),
            self.start_time.into_into_dart().into_dart(),
            self.run_time.into_into_dart().into_dart(),
            self.cpu_usage.into_into_dart().into_dart(),
            self.user_id.into_into_dart().into_dart(),
            self.effective_user_id.into_into_dart().into_dart(),
            self.group_id.into_into_dart().into_dart(),
            self.effective_group_id.into_into_dart().into_dart(),
            self.process_status.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::system_info::entity::ProcessEntity
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::system_info::entity::ProcessEntity>
    for crate::api::system_info::entity::ProcessEntity
{
    fn into_into_dart(self) -> crate::api::system_info::entity::ProcessEntity {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::system_info::entity::ProcessStatusEntity {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::system_info::entity::ProcessStatusEntity::Idle => {
                [0.into_dart()].into_dart()
            }
            crate::api::system_info::entity::ProcessStatusEntity::Run => {
                [1.into_dart()].into_dart()
            }
            crate::api::system_info::entity::ProcessStatusEntity::Sleep => {
                [2.into_dart()].into_dart()
            }
            crate::api::system_info::entity::ProcessStatusEntity::Stop => {
                [3.into_dart()].into_dart()
            }
            crate::api::system_info::entity::ProcessStatusEntity::Zombie => {
                [4.into_dart()].into_dart()
            }
            crate::api::system_info::entity::ProcessStatusEntity::Tracing => {
                [5.into_dart()].into_dart()
            }
            crate::api::system_info::entity::ProcessStatusEntity::Dead => {
                [6.into_dart()].into_dart()
            }
            crate::api::system_info::entity::ProcessStatusEntity::Wakekill => {
                [7.into_dart()].into_dart()
            }
            crate::api::system_info::entity::ProcessStatusEntity::Waking => {
                [8.into_dart()].into_dart()
            }
            crate::api::system_info::entity::ProcessStatusEntity::Parked => {
                [9.into_dart()].into_dart()
            }
            crate::api::system_info::entity::ProcessStatusEntity::LockBlocked => {
                [10.into_dart()].into_dart()
            }
            crate::api::system_info::entity::ProcessStatusEntity::UninterruptibleDiskSleep => {
                [11.into_dart()].into_dart()
            }
            crate::api::system_info::entity::ProcessStatusEntity::Unknown(field0) => {
                [12.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::system_info::entity::ProcessStatusEntity
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::system_info::entity::ProcessStatusEntity>
    for crate::api::system_info::entity::ProcessStatusEntity
{
    fn into_into_dart(self) -> crate::api::system_info::entity::ProcessStatusEntity {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::active_window::window::UsageEntity {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.memory.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::active_window::window::UsageEntity
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::active_window::window::UsageEntity>
    for crate::api::active_window::window::UsageEntity
{
    fn into_into_dart(self) -> crate::api::active_window::window::UsageEntity {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::active_window::window::WindowEntity {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.title.into_into_dart().into_dart(),
            self.position.into_into_dart().into_dart(),
            self.info.into_into_dart().into_dart(),
            self.usage.into_into_dart().into_dart(),
            self.url.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::active_window::window::WindowEntity
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::active_window::window::WindowEntity>
    for crate::api::active_window::window::WindowEntity
{
    fn into_into_dart(self) -> crate::api::active_window::window::WindowEntity {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::active_window::window::WindowIconEntity {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.window.into_into_dart().into_dart(),
            self.icon.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::active_window::window::WindowIconEntity
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::active_window::window::WindowIconEntity>
    for crate::api::active_window::window::WindowIconEntity
{
    fn into_into_dart(self) -> crate::api::active_window::window::WindowIconEntity {
        self
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for Manager {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Manager>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode for Sender<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Sender < String >>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode for flutter_rust_bridge::DartOpaque {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.encode(), serializer);
    }
}

impl SseEncode for std::collections::HashMap<String, Option<String>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(String, Option<String>)>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode for std::collections::HashMap<String, u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(String, u64)>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Manager>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Sender<String>>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::api::system_clipboard::clipboard::ClipboardData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::system_clipboard::clipboard::DataType>::sse_encode(self.data_type, serializer);
        <Option<String>>::sse_encode(self.content, serializer);
        <Option<crate::api::system_clipboard::clipboard::CPImage>>::sse_encode(
            self.image, serializer,
        );
        <Option<Vec<String>>>::sse_encode(self.paths, serializer);
        <Option<String>>::sse_encode(self.icon, serializer);
        <Option<String>>::sse_encode(self.app_name, serializer);
    }
}

impl SseEncode for crate::api::system_clipboard::clipboard::CPImage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.width, serializer);
        <u32>::sse_encode(self.height, serializer);
        <Vec<u8>>::sse_encode(self.bytes, serializer);
    }
}

impl SseEncode for crate::api::system_info::entity::CpuEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <String>::sse_encode(self.vendor_id, serializer);
        <String>::sse_encode(self.brand, serializer);
        <crate::api::system_info::entity::CpuUsageEntity>::sse_encode(self.usage, serializer);
    }
}

impl SseEncode for crate::api::system_info::entity::CpuUsageEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <f32>::sse_encode(self.percent, serializer);
        <u64>::sse_encode(self.frequency, serializer);
    }
}

impl SseEncode for crate::api::system_clipboard::clipboard::DataType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::system_clipboard::clipboard::DataType::FILE => 0,
                crate::api::system_clipboard::clipboard::DataType::TEXT => 1,
                crate::api::system_clipboard::clipboard::DataType::IMAGE => 2,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for f32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_f32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_f64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for crate::api::system_tray::entity::FFIIconEvent {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::system_tray::entity::FFIIconEvent::Click {
                id,
                position,
                rect,
                button,
                button_state,
            } => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(id, serializer);
                <crate::api::system_tray::entity::FFIPhysicalPosition>::sse_encode(
                    position, serializer,
                );
                <crate::api::system_tray::entity::FFIRect>::sse_encode(rect, serializer);
                <crate::api::system_tray::entity::FFIMouseButton>::sse_encode(button, serializer);
                <crate::api::system_tray::entity::FFIMouseButtonState>::sse_encode(
                    button_state,
                    serializer,
                );
            }
            crate::api::system_tray::entity::FFIIconEvent::DoubleClick {
                id,
                position,
                rect,
                button,
            } => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(id, serializer);
                <crate::api::system_tray::entity::FFIPhysicalPosition>::sse_encode(
                    position, serializer,
                );
                <crate::api::system_tray::entity::FFIRect>::sse_encode(rect, serializer);
                <crate::api::system_tray::entity::FFIMouseButton>::sse_encode(button, serializer);
            }
            crate::api::system_tray::entity::FFIIconEvent::Enter { id, position, rect } => {
                <i32>::sse_encode(2, serializer);
                <String>::sse_encode(id, serializer);
                <crate::api::system_tray::entity::FFIPhysicalPosition>::sse_encode(
                    position, serializer,
                );
                <crate::api::system_tray::entity::FFIRect>::sse_encode(rect, serializer);
            }
            crate::api::system_tray::entity::FFIIconEvent::Move { id, position, rect } => {
                <i32>::sse_encode(3, serializer);
                <String>::sse_encode(id, serializer);
                <crate::api::system_tray::entity::FFIPhysicalPosition>::sse_encode(
                    position, serializer,
                );
                <crate::api::system_tray::entity::FFIRect>::sse_encode(rect, serializer);
            }
            crate::api::system_tray::entity::FFIIconEvent::Leave { id, position, rect } => {
                <i32>::sse_encode(4, serializer);
                <String>::sse_encode(id, serializer);
                <crate::api::system_tray::entity::FFIPhysicalPosition>::sse_encode(
                    position, serializer,
                );
                <crate::api::system_tray::entity::FFIRect>::sse_encode(rect, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::system_tray::entity::FFIMouseButton {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::system_tray::entity::FFIMouseButton::Left => 0,
                crate::api::system_tray::entity::FFIMouseButton::Right => 1,
                crate::api::system_tray::entity::FFIMouseButton::Middle => 2,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::system_tray::entity::FFIMouseButtonState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::system_tray::entity::FFIMouseButtonState::Up => 0,
                crate::api::system_tray::entity::FFIMouseButtonState::Down => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::system_tray::entity::FFIPhysicalPosition {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <f64>::sse_encode(self.x, serializer);
        <f64>::sse_encode(self.y, serializer);
    }
}

impl SseEncode for crate::api::system_tray::entity::FFIPhysicalSize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.width, serializer);
        <u32>::sse_encode(self.height, serializer);
    }
}

impl SseEncode for crate::api::system_tray::entity::FFIRect {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::system_tray::entity::FFIPhysicalSize>::sse_encode(self.size, serializer);
        <crate::api::system_tray::entity::FFIPhysicalPosition>::sse_encode(
            self.position,
            serializer,
        );
    }
}

impl SseEncode for crate::api::system_tray::entity::FFISysTrayEvent {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::system_tray::entity::MySysTrayEventEnum>::sse_encode(
            self.event_type,
            serializer,
        );
        <Option<String>>::sse_encode(self.menu_event_id, serializer);
        <Option<crate::api::system_tray::entity::FFIIconEvent>>::sse_encode(
            self.tray_event,
            serializer,
        );
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for crate::api::active_window::window::IconEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.data, serializer);
        <u32>::sse_encode(self.height, serializer);
        <u32>::sse_encode(self.width, serializer);
    }
}

impl SseEncode for crate::api::active_window::window::InfoEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.process_id, serializer);
        <String>::sse_encode(self.path, serializer);
        <String>::sse_encode(self.name, serializer);
        <String>::sse_encode(self.exec_name, serializer);
    }
}

impl SseEncode for crate::api::system_info::entity::IpNetworkEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::system_info::entity::IpNetworkType>::sse_encode(self.ip, serializer);
        <u8>::sse_encode(self.prefix, serializer);
    }
}

impl SseEncode for crate::api::system_info::entity::IpNetworkType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::system_info::entity::IpNetworkType::IPV4 => 0,
                crate::api::system_info::entity::IpNetworkType::IPV6 => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <String>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::system_info::entity::CpuEntity> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::system_info::entity::CpuEntity>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::system_info::entity::IpNetworkEntity> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::system_info::entity::IpNetworkEntity>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::system_info::entity::NetWorkEntity> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::system_info::entity::NetWorkEntity>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::system_info::entity::ProcessEntity> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::system_info::entity::ProcessEntity>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(String, Option<String>)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(String, Option<String>)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(String, u64)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(String, u64)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::active_window::window::WindowIconEntity> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::active_window::window::WindowIconEntity>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::api::system_tray::entity::MySysTrayEventEnum {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::system_tray::entity::MySysTrayEventEnum::MENU => 0,
                crate::api::system_tray::entity::MySysTrayEventEnum::TRAY => 1,
                crate::api::system_tray::entity::MySysTrayEventEnum::NONE => 2,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::system_info::entity::NetWorkEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <u64>::sse_encode(self.total_received, serializer);
        <u64>::sse_encode(self.received, serializer);
        <u64>::sse_encode(self.transmitted, serializer);
        <u64>::sse_encode(self.total_transmitted, serializer);
        <u64>::sse_encode(self.packets_received, serializer);
        <u64>::sse_encode(self.total_packets_received, serializer);
        <u64>::sse_encode(self.packets_transmitted, serializer);
        <u64>::sse_encode(self.total_packets_transmitted, serializer);
        <u64>::sse_encode(self.errors_on_received, serializer);
        <u64>::sse_encode(self.total_errors_on_received, serializer);
        <u64>::sse_encode(self.errors_on_transmitted, serializer);
        <u64>::sse_encode(self.total_errors_on_transmitted, serializer);
        <String>::sse_encode(self.mac_address, serializer);
        <Vec<crate::api::system_info::entity::IpNetworkEntity>>::sse_encode(
            self.ip_networks,
            serializer,
        );
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::system_clipboard::clipboard::CPImage> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::system_clipboard::clipboard::CPImage>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::system_tray::entity::FFIIconEvent> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::system_tray::entity::FFIIconEvent>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<u32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u32>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<String>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<String>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::api::active_window::window::PositionEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.x, serializer);
        <i32>::sse_encode(self.y, serializer);
        <i32>::sse_encode(self.width, serializer);
        <i32>::sse_encode(self.height, serializer);
        <bool>::sse_encode(self.is_full_screen, serializer);
    }
}

impl SseEncode for crate::api::system_info::entity::ProcessEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <Vec<String>>::sse_encode(self.cmd, serializer);
        <u32>::sse_encode(self.pid, serializer);
        <Option<u32>>::sse_encode(self.parent, serializer);
        <Vec<String>>::sse_encode(self.environ, serializer);
        <Option<String>>::sse_encode(self.cwd, serializer);
        <Option<String>>::sse_encode(self.root, serializer);
        <u64>::sse_encode(self.memory, serializer);
        <u64>::sse_encode(self.virtual_memory, serializer);
        <u64>::sse_encode(self.start_time, serializer);
        <u64>::sse_encode(self.run_time, serializer);
        <f32>::sse_encode(self.cpu_usage, serializer);
        <String>::sse_encode(self.user_id, serializer);
        <Option<String>>::sse_encode(self.effective_user_id, serializer);
        <Option<String>>::sse_encode(self.group_id, serializer);
        <Option<String>>::sse_encode(self.effective_group_id, serializer);
        <crate::api::system_info::entity::ProcessStatusEntity>::sse_encode(
            self.process_status,
            serializer,
        );
    }
}

impl SseEncode for crate::api::system_info::entity::ProcessStatusEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::system_info::entity::ProcessStatusEntity::Idle => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::system_info::entity::ProcessStatusEntity::Run => {
                <i32>::sse_encode(1, serializer);
            }
            crate::api::system_info::entity::ProcessStatusEntity::Sleep => {
                <i32>::sse_encode(2, serializer);
            }
            crate::api::system_info::entity::ProcessStatusEntity::Stop => {
                <i32>::sse_encode(3, serializer);
            }
            crate::api::system_info::entity::ProcessStatusEntity::Zombie => {
                <i32>::sse_encode(4, serializer);
            }
            crate::api::system_info::entity::ProcessStatusEntity::Tracing => {
                <i32>::sse_encode(5, serializer);
            }
            crate::api::system_info::entity::ProcessStatusEntity::Dead => {
                <i32>::sse_encode(6, serializer);
            }
            crate::api::system_info::entity::ProcessStatusEntity::Wakekill => {
                <i32>::sse_encode(7, serializer);
            }
            crate::api::system_info::entity::ProcessStatusEntity::Waking => {
                <i32>::sse_encode(8, serializer);
            }
            crate::api::system_info::entity::ProcessStatusEntity::Parked => {
                <i32>::sse_encode(9, serializer);
            }
            crate::api::system_info::entity::ProcessStatusEntity::LockBlocked => {
                <i32>::sse_encode(10, serializer);
            }
            crate::api::system_info::entity::ProcessStatusEntity::UninterruptibleDiskSleep => {
                <i32>::sse_encode(11, serializer);
            }
            crate::api::system_info::entity::ProcessStatusEntity::Unknown(field0) => {
                <i32>::sse_encode(12, serializer);
                <u32>::sse_encode(field0, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode
    for (
        std::collections::HashMap<String, u64>,
        std::collections::HashMap<String, Option<String>>,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <std::collections::HashMap<String, u64>>::sse_encode(self.0, serializer);
        <std::collections::HashMap<String, Option<String>>>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (String, Option<String>) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <Option<String>>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (String, u64) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <u64>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for crate::api::active_window::window::UsageEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.memory, serializer);
    }
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

impl SseEncode for crate::api::active_window::window::WindowEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.title, serializer);
        <crate::api::active_window::window::PositionEntity>::sse_encode(self.position, serializer);
        <crate::api::active_window::window::InfoEntity>::sse_encode(self.info, serializer);
        <crate::api::active_window::window::UsageEntity>::sse_encode(self.usage, serializer);
        <String>::sse_encode(self.url, serializer);
    }
}

impl SseEncode for crate::api::active_window::window::WindowIconEntity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::active_window::window::WindowEntity>::sse_encode(self.window, serializer);
        <crate::api::active_window::window::IconEntity>::sse_encode(self.icon, serializer);
    }
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // Generated by `flutter_rust_bridge`@ 2.3.0.

    // Section: imports

    use super::*;
    use crate::api::system_clipboard::clipboard::*;
    use crate::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    use std::sync::mpsc::Sender;

    flutter_rust_bridge::frb_generated_boilerplate_io!();

    #[no_mangle]
    pub extern "C" fn frbgen_flutter_rust_lib_core_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerManager(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Manager>>::increment_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_flutter_rust_lib_core_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerManager(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Manager>>::decrement_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_flutter_rust_lib_core_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderString(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Sender < String >>>::increment_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_flutter_rust_lib_core_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderString(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Sender < String >>>::decrement_strong_count(ptr as _);
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    // This file is automatically generated, so please do not edit it.
    // Generated by `flutter_rust_bridge`@ 2.3.0.

    // Section: imports

    use super::*;
    use crate::api::system_clipboard::clipboard::*;
    use crate::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::wasm_bindgen;
    use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    use std::sync::mpsc::Sender;

    flutter_rust_bridge::frb_generated_boilerplate_web!();

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerManager(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Manager>>::increment_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerManager(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Manager>>::decrement_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderString(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Sender < String >>>::increment_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderString(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Sender < String >>>::decrement_strong_count(ptr as _);
    }
}
#[cfg(target_family = "wasm")]
pub use web::*;
