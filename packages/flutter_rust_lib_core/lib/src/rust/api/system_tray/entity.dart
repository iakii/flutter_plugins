// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.4.0.

// ignore_for_file: prefer_const_constructors

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'entity.freezed.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `clone`, `eq`, `fmt`, `hash`

@freezed
sealed class FFIIconEvent with _$FFIIconEvent {
  const FFIIconEvent._();

  /// A click happened on the tray icon.
  const factory FFIIconEvent.click({
    /// Id of the tray icon which triggered this event.
    required String id,

    /// Physical Position of this event.
    required FFIPhysicalPosition position,

    /// Position and size of the tray icon.
    required FFIRect rect,

    /// Mouse button that triggered this event.
    required FFIMouseButton button,

    /// Mouse button state when this event was triggered.
    required FFIMouseButtonState buttonState,
  }) = FFIIconEvent_Click;

  /// A double click happened on the tray icon. **Windows Only**
  const factory FFIIconEvent.doubleClick({
    /// Id of the tray icon which triggered this event.
    required String id,

    /// Physical Position of this event.
    required FFIPhysicalPosition position,

    /// Position and size of the tray icon.
    required FFIRect rect,

    /// Mouse button that triggered this event.
    required FFIMouseButton button,
  }) = FFIIconEvent_DoubleClick;

  /// The mouse entered the tray icon region.
  const factory FFIIconEvent.enter({
    /// Id of the tray icon which triggered this event.
    required String id,

    /// Physical Position of this event.
    required FFIPhysicalPosition position,

    /// Position and size of the tray icon.
    required FFIRect rect,
  }) = FFIIconEvent_Enter;

  /// The mouse moved over the tray icon region.
  const factory FFIIconEvent.move({
    /// Id of the tray icon which triggered this event.
    required String id,

    /// Physical Position of this event.
    required FFIPhysicalPosition position,

    /// Position and size of the tray icon.
    required FFIRect rect,
  }) = FFIIconEvent_Move;

  /// The mouse left the tray icon region.
  const factory FFIIconEvent.leave({
    /// Id of the tray icon which triggered this event.
    required String id,

    /// Physical Position of this event.
    required FFIPhysicalPosition position,

    /// Position and size of the tray icon.
    required FFIRect rect,
  }) = FFIIconEvent_Leave;
}

enum FFIMouseButton {
  left,
  right,
  middle,
  ;
}

enum FFIMouseButtonState {
  up,
  down,
  ;
}

class FFIPhysicalPosition {
  final double x;
  final double y;

  const FFIPhysicalPosition({
    required this.x,
    required this.y,
  });

  @override
  int get hashCode => x.hashCode ^ y.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FFIPhysicalPosition &&
          runtimeType == other.runtimeType &&
          x == other.x &&
          y == other.y;
}

class FFIPhysicalSize {
  final int width;
  final int height;

  const FFIPhysicalSize({
    required this.width,
    required this.height,
  });

  @override
  int get hashCode => width.hashCode ^ height.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FFIPhysicalSize &&
          runtimeType == other.runtimeType &&
          width == other.width &&
          height == other.height;
}

class FFIRect {
  final FFIPhysicalSize size;
  final FFIPhysicalPosition position;

  const FFIRect({
    required this.size,
    required this.position,
  });

  @override
  int get hashCode => size.hashCode ^ position.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FFIRect &&
          runtimeType == other.runtimeType &&
          size == other.size &&
          position == other.position;
}

class FFISysTrayEvent {
  final MySysTrayEventEnum eventType;
  final String? menuEventId;
  final FFIIconEvent? trayEvent;

  const FFISysTrayEvent({
    required this.eventType,
    this.menuEventId,
    this.trayEvent,
  });

  static Future<FFISysTrayEvent> fromEvent(
          {required MySysTrayEventEnum eventType,
          String? menuEventId,
          FFIIconEvent? trayEvent}) =>
      RustLib.instance.api.crateApiSystemTrayEntityFfiSysTrayEventFromEvent(
          eventType: eventType, menuEventId: menuEventId, trayEvent: trayEvent);

  @override
  int get hashCode =>
      eventType.hashCode ^ menuEventId.hashCode ^ trayEvent.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FFISysTrayEvent &&
          runtimeType == other.runtimeType &&
          eventType == other.eventType &&
          menuEventId == other.menuEventId &&
          trayEvent == other.trayEvent;
}

enum MySysTrayEventEnum {
  menu,
  tray,
  none,
  ;
}
