// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.4.0.

// ignore_for_file: prefer_const_constructors

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'entity.freezed.dart';

// These types are ignored because they are not used by any `pub` functions: `SystemInfoEntity`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`

@freezed
@immutable
class CpuEntity with _$CpuEntity {
  const factory CpuEntity({
    required String name,
    required String vendorId,
    required String brand,
    required CpuUsageEntity usage,
  }) = _CpuEntity;
}

@freezed
@immutable
class CpuUsageEntity with _$CpuUsageEntity {
  const factory CpuUsageEntity({
    required double percent,
    required BigInt frequency,
  }) = _CpuUsageEntity;
}

@freezed
@immutable
class IpNetworkEntity with _$IpNetworkEntity {
  const factory IpNetworkEntity({
    required IpNetworkType ip,
    required int prefix,
  }) = _IpNetworkEntity;
}

enum IpNetworkType {
  ipv4,
  ipv6,
  ;
}

@freezed
@immutable
class NetWorkEntity with _$NetWorkEntity {
  const factory NetWorkEntity({
    required String name,
    required BigInt totalReceived,
    required BigInt received,
    required BigInt transmitted,
    required BigInt totalTransmitted,
    required BigInt packetsReceived,
    required BigInt totalPacketsReceived,
    required BigInt packetsTransmitted,
    required BigInt totalPacketsTransmitted,
    required BigInt errorsOnReceived,
    required BigInt totalErrorsOnReceived,
    required BigInt errorsOnTransmitted,
    required BigInt totalErrorsOnTransmitted,
    required String macAddress,
    required List<IpNetworkEntity> ipNetworks,
  }) = _NetWorkEntity;
}

@freezed
@immutable
class ProcessEntity with _$ProcessEntity {
  const factory ProcessEntity({
    required String name,
    required List<String> cmd,
    required int pid,
    int? parent,
    required List<String> environ,
    String? cwd,
    String? root,
    required BigInt memory,
    required BigInt virtualMemory,
    required BigInt startTime,
    required BigInt runTime,
    required double cpuUsage,
    required String userId,
    String? effectiveUserId,
    String? groupId,
    String? effectiveGroupId,
    required ProcessStatusEntity processStatus,
  }) = _ProcessEntity;
}

@freezed
sealed class ProcessStatusEntity with _$ProcessStatusEntity {
  const ProcessStatusEntity._();

  /// ## Linux
  ///
  /// Idle kernel thread.
  ///
  /// ## macOS/FreeBSD
  ///
  /// Process being created by fork.
  ///
  /// ## Other OS
  ///
  /// Not available.
  const factory ProcessStatusEntity.idle() = ProcessStatusEntity_Idle;

  /// Running.
  const factory ProcessStatusEntity.run() = ProcessStatusEntity_Run;

  /// ## Linux
  ///
  /// Sleeping in an interruptible waiting.
  ///
  /// ## macOS/FreeBSD
  ///
  /// Sleeping on an address.
  ///
  /// ## Other OS
  ///
  /// Not available.
  const factory ProcessStatusEntity.sleep() = ProcessStatusEntity_Sleep;

  /// ## Linux
  ///
  /// Stopped (on a signal) or (before Linux 2.6.33) trace stopped.
  ///
  /// ## macOS/FreeBSD
  ///
  /// Process debugging or suspension.
  ///
  /// ## Other OS
  ///
  /// Not available.
  const factory ProcessStatusEntity.stop() = ProcessStatusEntity_Stop;

  /// ## Linux/FreeBSD/macOS
  ///
  /// Zombie process. Terminated but not reaped by its parent.
  ///
  /// ## Other OS
  ///
  /// Not available.
  const factory ProcessStatusEntity.zombie() = ProcessStatusEntity_Zombie;

  /// ## Linux
  ///
  /// Tracing stop (Linux 2.6.33 onward). Stopped by debugger during the tracing.
  ///
  /// ## Other OS
  ///
  /// Not available.
  const factory ProcessStatusEntity.tracing() = ProcessStatusEntity_Tracing;

  /// ## Linux
  ///
  /// Dead/uninterruptible sleep (usually IO).
  ///
  /// ## FreeBSD
  ///
  /// A process should never end up in this state.
  ///
  /// ## Other OS
  ///
  /// Not available.
  const factory ProcessStatusEntity.dead() = ProcessStatusEntity_Dead;

  /// ## Linux
  ///
  /// WakeKill (Linux 2.6.33 to 3.13 only).
  ///
  /// ## Other OS
  ///
  /// Not available.
  const factory ProcessStatusEntity.wakeKill() = ProcessStatusEntity_WakeKill;

  /// ## Linux
  ///
  /// Waking (Linux 2.6.33 to 3.13 only).
  ///
  /// ## Other OS
  ///
  /// Not available.
  const factory ProcessStatusEntity.waking() = ProcessStatusEntity_Waking;

  /// ## Linux
  ///
  /// Parked (Linux 3.9 to 3.13 only).
  ///
  /// ## macOS
  ///
  /// Halted at a clean point.
  ///
  /// ## Other OS
  ///
  /// Not available.
  const factory ProcessStatusEntity.parked() = ProcessStatusEntity_Parked;

  /// ## FreeBSD
  ///
  /// Blocked on a lock.
  ///
  /// ## Other OS
  ///
  /// Not available.
  const factory ProcessStatusEntity.lockBlocked() =
      ProcessStatusEntity_LockBlocked;

  /// ## Linux
  ///
  /// Waiting in uninterruptible disk sleep.
  ///
  /// ## Other OS
  ///
  /// Not available.
  const factory ProcessStatusEntity.uninterruptibleDiskSleep() =
      ProcessStatusEntity_UninterruptibleDiskSleep;

  /// Unknown.
  const factory ProcessStatusEntity.unknown(
    int field0,
  ) = ProcessStatusEntity_Unknown;
}
