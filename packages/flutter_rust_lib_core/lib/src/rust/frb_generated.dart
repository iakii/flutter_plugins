// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.4.0.

// ignore_for_file: prefer_const_constructors

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/active_window/entity.dart';
import 'api/active_window/window.dart';
import 'api/application.dart';
import 'api/keypress_simulator/simulator.dart';
import 'api/system_clipboard/clipboard.dart';
import 'api/system_clipboard/entity.dart';
import 'api/system_info/cpus.dart';
import 'api/system_info/entity.dart';
import 'api/system_info/networks.dart';
import 'api/system_info/process.dart';
import 'api/system_info/system_info.dart';
import 'api/system_tray/entity.dart';
import 'api/tiny_png/tiny_png.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiApplicationInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.4.0';

  @override
  int get rustContentHash => 1647355598;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'flutter_rust_lib_core',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  List<WindowIconEntity> crateApiActiveWindowWindowGetAllOpenWindows();

  WindowIconEntity crateApiActiveWindowWindowGetCurrentActiveWindow();

  IconEntity crateApiActiveWindowWindowGetWindowIconByWindowId(
      {required int id});

  String crateApiApplicationGreet({required String name});

  Future<void> crateApiApplicationInitApp();

  void crateApiKeypressSimulatorSimulatorInsert();

  void crateApiKeypressSimulatorSimulatorPaste();

  Future<void> crateApiSystemClipboardClipboardClipboardListenerStart(
      {required FutureOr<String> Function(String) dartCallback});

  ClipboardData crateApiSystemClipboardClipboardGetClipboardData();

  void crateApiSystemClipboardClipboardSetClipboardData(
      {required ClipboardData data});

  Future<Manager> crateApiSystemClipboardEntityManagerNew(
      {required SenderString sender});

  List<CpuEntity> crateApiSystemInfoCpusGetCpus();

  List<NetWorkEntity> crateApiSystemInfoNetworksGetNetworks();

  Future<String?> crateApiSystemInfoProcessFindPid({required String name});

  List<ProcessEntity> crateApiSystemInfoProcessGetProcesses();

  bool crateApiSystemInfoProcessKill({required String name});

  Future<(Map<String, BigInt>, Map<String, String?>)>
      crateApiSystemInfoSystemInfoGetSystemInfo();

  Future<void> crateApiSystemInfoSystemInfoSystemInfoFmt();

  Future<FFISysTrayEvent> crateApiSystemTrayEntityFfiSysTrayEventFromEvent(
      {required MySysTrayEventEnum eventType,
      String? menuEventId,
      FFIIconEvent? trayEvent});

  Future<void> crateApiTinyPngTinyPngCompressImage(
      {required String path, required int quality});

  Future<void> crateApiTinyPngTinyPngParseJpg(
      {required String path, required String output, required int quality});

  Future<void> crateApiTinyPngTinyPngParsePng(
      {required String path, required String output, required int level});

  Future<void> crateApiTinyPngTinyPngParseWebp(
      {required String path, required String output, required double quality});

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Manager;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Manager;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ManagerPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SenderString;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SenderString;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SenderStringPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  List<WindowIconEntity> crateApiActiveWindowWindowGetAllOpenWindows() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_window_icon_entity,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiActiveWindowWindowGetAllOpenWindowsConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiActiveWindowWindowGetAllOpenWindowsConstMeta =>
      const TaskConstMeta(
        debugName: "get_all_open_windows",
        argNames: [],
      );

  @override
  WindowIconEntity crateApiActiveWindowWindowGetCurrentActiveWindow() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_window_icon_entity,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiActiveWindowWindowGetCurrentActiveWindowConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiActiveWindowWindowGetCurrentActiveWindowConstMeta =>
          const TaskConstMeta(
            debugName: "get_current_active_window",
            argNames: [],
          );

  @override
  IconEntity crateApiActiveWindowWindowGetWindowIconByWindowId(
      {required int id}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(id, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_icon_entity,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiActiveWindowWindowGetWindowIconByWindowIdConstMeta,
      argValues: [id],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiActiveWindowWindowGetWindowIconByWindowIdConstMeta =>
          const TaskConstMeta(
            debugName: "get_window_icon_by_window_id",
            argNames: ["id"],
          );

  @override
  String crateApiApplicationGreet({required String name}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(name, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApplicationGreetConstMeta,
      argValues: [name],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApplicationGreetConstMeta => const TaskConstMeta(
        debugName: "greet",
        argNames: ["name"],
      );

  @override
  Future<void> crateApiApplicationInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApplicationInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApplicationInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  void crateApiKeypressSimulatorSimulatorInsert() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiKeypressSimulatorSimulatorInsertConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiKeypressSimulatorSimulatorInsertConstMeta =>
      const TaskConstMeta(
        debugName: "insert",
        argNames: [],
      );

  @override
  void crateApiKeypressSimulatorSimulatorPaste() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiKeypressSimulatorSimulatorPasteConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiKeypressSimulatorSimulatorPasteConstMeta =>
      const TaskConstMeta(
        debugName: "paste",
        argNames: [],
      );

  @override
  Future<void> crateApiSystemClipboardClipboardClipboardListenerStart(
      {required FutureOr<String> Function(String) dartCallback}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs_String_Output_String_AnyhowException(
            dartCallback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiSystemClipboardClipboardClipboardListenerStartConstMeta,
      argValues: [dartCallback],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSystemClipboardClipboardClipboardListenerStartConstMeta =>
          const TaskConstMeta(
            debugName: "clipboard_listener_start",
            argNames: ["dartCallback"],
          );

  @override
  ClipboardData crateApiSystemClipboardClipboardGetClipboardData() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_clipboard_data,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSystemClipboardClipboardGetClipboardDataConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSystemClipboardClipboardGetClipboardDataConstMeta =>
          const TaskConstMeta(
            debugName: "get_clipboard_data",
            argNames: [],
          );

  @override
  void crateApiSystemClipboardClipboardSetClipboardData(
      {required ClipboardData data}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_clipboard_data(data, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSystemClipboardClipboardSetClipboardDataConstMeta,
      argValues: [data],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSystemClipboardClipboardSetClipboardDataConstMeta =>
          const TaskConstMeta(
            debugName: "set_clipboard_data",
            argNames: ["data"],
          );

  @override
  Future<Manager> crateApiSystemClipboardEntityManagerNew(
      {required SenderString sender}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderString(
            sender, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerManager,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSystemClipboardEntityManagerNewConstMeta,
      argValues: [sender],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSystemClipboardEntityManagerNewConstMeta =>
      const TaskConstMeta(
        debugName: "Manager_new",
        argNames: ["sender"],
      );

  @override
  List<CpuEntity> crateApiSystemInfoCpusGetCpus() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_cpu_entity,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSystemInfoCpusGetCpusConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSystemInfoCpusGetCpusConstMeta =>
      const TaskConstMeta(
        debugName: "get_cpus",
        argNames: [],
      );

  @override
  List<NetWorkEntity> crateApiSystemInfoNetworksGetNetworks() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_net_work_entity,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSystemInfoNetworksGetNetworksConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSystemInfoNetworksGetNetworksConstMeta =>
      const TaskConstMeta(
        debugName: "get_networks",
        argNames: [],
      );

  @override
  Future<String?> crateApiSystemInfoProcessFindPid({required String name}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(name, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSystemInfoProcessFindPidConstMeta,
      argValues: [name],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSystemInfoProcessFindPidConstMeta =>
      const TaskConstMeta(
        debugName: "find_pid",
        argNames: ["name"],
      );

  @override
  List<ProcessEntity> crateApiSystemInfoProcessGetProcesses() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_process_entity,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSystemInfoProcessGetProcessesConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSystemInfoProcessGetProcessesConstMeta =>
      const TaskConstMeta(
        debugName: "get_processes",
        argNames: [],
      );

  @override
  bool crateApiSystemInfoProcessKill({required String name}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(name, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSystemInfoProcessKillConstMeta,
      argValues: [name],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSystemInfoProcessKillConstMeta =>
      const TaskConstMeta(
        debugName: "kill",
        argNames: ["name"],
      );

  @override
  Future<(Map<String, BigInt>, Map<String, String?>)>
      crateApiSystemInfoSystemInfoGetSystemInfo() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_record_map_string_u_64_map_string_opt_string,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSystemInfoSystemInfoGetSystemInfoConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSystemInfoSystemInfoGetSystemInfoConstMeta =>
      const TaskConstMeta(
        debugName: "get_system_info",
        argNames: [],
      );

  @override
  Future<void> crateApiSystemInfoSystemInfoSystemInfoFmt() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSystemInfoSystemInfoSystemInfoFmtConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSystemInfoSystemInfoSystemInfoFmtConstMeta =>
      const TaskConstMeta(
        debugName: "system_info_fmt",
        argNames: [],
      );

  @override
  Future<FFISysTrayEvent> crateApiSystemTrayEntityFfiSysTrayEventFromEvent(
      {required MySysTrayEventEnum eventType,
      String? menuEventId,
      FFIIconEvent? trayEvent}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_my_sys_tray_event_enum(eventType, serializer);
        sse_encode_opt_String(menuEventId, serializer);
        sse_encode_opt_box_autoadd_ffi_icon_event(trayEvent, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_ffi_sys_tray_event,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSystemTrayEntityFfiSysTrayEventFromEventConstMeta,
      argValues: [eventType, menuEventId, trayEvent],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSystemTrayEntityFfiSysTrayEventFromEventConstMeta =>
          const TaskConstMeta(
            debugName: "ffi_sys_tray_event_from_event",
            argNames: ["eventType", "menuEventId", "trayEvent"],
          );

  @override
  Future<void> crateApiTinyPngTinyPngCompressImage(
      {required String path, required int quality}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        sse_encode_u_8(quality, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 20, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTinyPngTinyPngCompressImageConstMeta,
      argValues: [path, quality],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTinyPngTinyPngCompressImageConstMeta =>
      const TaskConstMeta(
        debugName: "compress_image",
        argNames: ["path", "quality"],
      );

  @override
  Future<void> crateApiTinyPngTinyPngParseJpg(
      {required String path, required String output, required int quality}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        sse_encode_String(output, serializer);
        sse_encode_u_8(quality, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 21, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTinyPngTinyPngParseJpgConstMeta,
      argValues: [path, output, quality],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTinyPngTinyPngParseJpgConstMeta =>
      const TaskConstMeta(
        debugName: "parse_jpg",
        argNames: ["path", "output", "quality"],
      );

  @override
  Future<void> crateApiTinyPngTinyPngParsePng(
      {required String path, required String output, required int level}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        sse_encode_String(output, serializer);
        sse_encode_u_8(level, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 22, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTinyPngTinyPngParsePngConstMeta,
      argValues: [path, output, level],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTinyPngTinyPngParsePngConstMeta =>
      const TaskConstMeta(
        debugName: "parse_png",
        argNames: ["path", "output", "level"],
      );

  @override
  Future<void> crateApiTinyPngTinyPngParseWebp(
      {required String path, required String output, required double quality}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        sse_encode_String(output, serializer);
        sse_encode_f_32(quality, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 23, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTinyPngTinyPngParseWebpConstMeta,
      argValues: [path, output, quality],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTinyPngTinyPngParseWebpConstMeta =>
      const TaskConstMeta(
        debugName: "parse_webp",
        argNames: ["path", "output", "quality"],
      );

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_String_Output_String_AnyhowException(
          FutureOr<String> Function(String) raw) {
    return (callId, rawArg0) async {
      final arg0 = dco_decode_String(rawArg0);

      Box<String>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_String(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Manager => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerManager;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Manager => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerManager;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SenderString => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderString;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SenderString => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderString;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  Manager
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerManager(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ManagerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SenderString
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderString(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SenderStringImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FutureOr<String> Function(String)
      dco_decode_DartFn_Inputs_String_Output_String_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  Object dco_decode_DartOpaque(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return decodeDartOpaque(raw, generalizedFrbRustBinding);
  }

  @protected
  Map<String, String?> dco_decode_Map_String_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_opt_string(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, BigInt> dco_decode_Map_String_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_u_64(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Manager
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerManager(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ManagerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SenderString
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderString(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SenderStringImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  ClipImage dco_decode_box_autoadd_clip_image(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_clip_image(raw);
  }

  @protected
  ClipboardData dco_decode_box_autoadd_clipboard_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_clipboard_data(raw);
  }

  @protected
  FFIIconEvent dco_decode_box_autoadd_ffi_icon_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_icon_event(raw);
  }

  @protected
  FFIPhysicalPosition dco_decode_box_autoadd_ffi_physical_position(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_physical_position(raw);
  }

  @protected
  FFIRect dco_decode_box_autoadd_ffi_rect(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_rect(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  ClipImage dco_decode_clip_image(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ClipImage(
      width: dco_decode_u_32(arr[0]),
      height: dco_decode_u_32(arr[1]),
      bytes: dco_decode_list_prim_u_8_strict(arr[2]),
    );
  }

  @protected
  ClipboardData dco_decode_clipboard_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return ClipboardData(
      dataType: dco_decode_data_type(arr[0]),
      content: dco_decode_opt_String(arr[1]),
      image: dco_decode_opt_box_autoadd_clip_image(arr[2]),
      paths: dco_decode_opt_list_String(arr[3]),
      icon: dco_decode_opt_String(arr[4]),
      appName: dco_decode_opt_String(arr[5]),
    );
  }

  @protected
  CpuEntity dco_decode_cpu_entity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return CpuEntity(
      name: dco_decode_String(arr[0]),
      vendorId: dco_decode_String(arr[1]),
      brand: dco_decode_String(arr[2]),
      usage: dco_decode_cpu_usage_entity(arr[3]),
    );
  }

  @protected
  CpuUsageEntity dco_decode_cpu_usage_entity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return CpuUsageEntity(
      percent: dco_decode_f_32(arr[0]),
      frequency: dco_decode_u_64(arr[1]),
    );
  }

  @protected
  DataType dco_decode_data_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DataType.values[raw as int];
  }

  @protected
  double dco_decode_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  FFIIconEvent dco_decode_ffi_icon_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return FFIIconEvent_Click(
          id: dco_decode_String(raw[1]),
          position: dco_decode_box_autoadd_ffi_physical_position(raw[2]),
          rect: dco_decode_box_autoadd_ffi_rect(raw[3]),
          button: dco_decode_ffi_mouse_button(raw[4]),
          buttonState: dco_decode_ffi_mouse_button_state(raw[5]),
        );
      case 1:
        return FFIIconEvent_DoubleClick(
          id: dco_decode_String(raw[1]),
          position: dco_decode_box_autoadd_ffi_physical_position(raw[2]),
          rect: dco_decode_box_autoadd_ffi_rect(raw[3]),
          button: dco_decode_ffi_mouse_button(raw[4]),
        );
      case 2:
        return FFIIconEvent_Enter(
          id: dco_decode_String(raw[1]),
          position: dco_decode_box_autoadd_ffi_physical_position(raw[2]),
          rect: dco_decode_box_autoadd_ffi_rect(raw[3]),
        );
      case 3:
        return FFIIconEvent_Move(
          id: dco_decode_String(raw[1]),
          position: dco_decode_box_autoadd_ffi_physical_position(raw[2]),
          rect: dco_decode_box_autoadd_ffi_rect(raw[3]),
        );
      case 4:
        return FFIIconEvent_Leave(
          id: dco_decode_String(raw[1]),
          position: dco_decode_box_autoadd_ffi_physical_position(raw[2]),
          rect: dco_decode_box_autoadd_ffi_rect(raw[3]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  FFIMouseButton dco_decode_ffi_mouse_button(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FFIMouseButton.values[raw as int];
  }

  @protected
  FFIMouseButtonState dco_decode_ffi_mouse_button_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FFIMouseButtonState.values[raw as int];
  }

  @protected
  FFIPhysicalPosition dco_decode_ffi_physical_position(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return FFIPhysicalPosition(
      x: dco_decode_f_64(arr[0]),
      y: dco_decode_f_64(arr[1]),
    );
  }

  @protected
  FFIPhysicalSize dco_decode_ffi_physical_size(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return FFIPhysicalSize(
      width: dco_decode_u_32(arr[0]),
      height: dco_decode_u_32(arr[1]),
    );
  }

  @protected
  FFIRect dco_decode_ffi_rect(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return FFIRect(
      size: dco_decode_ffi_physical_size(arr[0]),
      position: dco_decode_ffi_physical_position(arr[1]),
    );
  }

  @protected
  FFISysTrayEvent dco_decode_ffi_sys_tray_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return FFISysTrayEvent(
      eventType: dco_decode_my_sys_tray_event_enum(arr[0]),
      menuEventId: dco_decode_opt_String(arr[1]),
      trayEvent: dco_decode_opt_box_autoadd_ffi_icon_event(arr[2]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  IconEntity dco_decode_icon_entity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return IconEntity(
      data: dco_decode_String(arr[0]),
      height: dco_decode_u_32(arr[1]),
      width: dco_decode_u_32(arr[2]),
    );
  }

  @protected
  InfoEntity dco_decode_info_entity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return InfoEntity(
      processId: dco_decode_u_32(arr[0]),
      path: dco_decode_String(arr[1]),
      name: dco_decode_String(arr[2]),
      execName: dco_decode_String(arr[3]),
    );
  }

  @protected
  IpNetworkEntity dco_decode_ip_network_entity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return IpNetworkEntity(
      ip: dco_decode_ip_network_type(arr[0]),
      prefix: dco_decode_u_8(arr[1]),
    );
  }

  @protected
  IpNetworkType dco_decode_ip_network_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return IpNetworkType.values[raw as int];
  }

  @protected
  PlatformInt64 dco_decode_isize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<CpuEntity> dco_decode_list_cpu_entity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_cpu_entity).toList();
  }

  @protected
  List<IpNetworkEntity> dco_decode_list_ip_network_entity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_ip_network_entity).toList();
  }

  @protected
  List<NetWorkEntity> dco_decode_list_net_work_entity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_net_work_entity).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<ProcessEntity> dco_decode_list_process_entity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_process_entity).toList();
  }

  @protected
  List<(String, String?)> dco_decode_list_record_string_opt_string(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_string_opt_string)
        .toList();
  }

  @protected
  List<(String, BigInt)> dco_decode_list_record_string_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_u_64).toList();
  }

  @protected
  List<WindowIconEntity> dco_decode_list_window_icon_entity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_window_icon_entity).toList();
  }

  @protected
  MySysTrayEventEnum dco_decode_my_sys_tray_event_enum(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MySysTrayEventEnum.values[raw as int];
  }

  @protected
  NetWorkEntity dco_decode_net_work_entity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 15)
      throw Exception('unexpected arr length: expect 15 but see ${arr.length}');
    return NetWorkEntity(
      name: dco_decode_String(arr[0]),
      totalReceived: dco_decode_u_64(arr[1]),
      received: dco_decode_u_64(arr[2]),
      transmitted: dco_decode_u_64(arr[3]),
      totalTransmitted: dco_decode_u_64(arr[4]),
      packetsReceived: dco_decode_u_64(arr[5]),
      totalPacketsReceived: dco_decode_u_64(arr[6]),
      packetsTransmitted: dco_decode_u_64(arr[7]),
      totalPacketsTransmitted: dco_decode_u_64(arr[8]),
      errorsOnReceived: dco_decode_u_64(arr[9]),
      totalErrorsOnReceived: dco_decode_u_64(arr[10]),
      errorsOnTransmitted: dco_decode_u_64(arr[11]),
      totalErrorsOnTransmitted: dco_decode_u_64(arr[12]),
      macAddress: dco_decode_String(arr[13]),
      ipNetworks: dco_decode_list_ip_network_entity(arr[14]),
    );
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  ClipImage? dco_decode_opt_box_autoadd_clip_image(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_clip_image(raw);
  }

  @protected
  FFIIconEvent? dco_decode_opt_box_autoadd_ffi_icon_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_ffi_icon_event(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_32(raw);
  }

  @protected
  List<String>? dco_decode_opt_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_String(raw);
  }

  @protected
  PositionEntity dco_decode_position_entity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return PositionEntity(
      x: dco_decode_i_32(arr[0]),
      y: dco_decode_i_32(arr[1]),
      width: dco_decode_i_32(arr[2]),
      height: dco_decode_i_32(arr[3]),
      isFullScreen: dco_decode_bool(arr[4]),
    );
  }

  @protected
  ProcessEntity dco_decode_process_entity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 17)
      throw Exception('unexpected arr length: expect 17 but see ${arr.length}');
    return ProcessEntity(
      name: dco_decode_String(arr[0]),
      cmd: dco_decode_list_String(arr[1]),
      pid: dco_decode_u_32(arr[2]),
      parent: dco_decode_opt_box_autoadd_u_32(arr[3]),
      environ: dco_decode_list_String(arr[4]),
      cwd: dco_decode_opt_String(arr[5]),
      root: dco_decode_opt_String(arr[6]),
      memory: dco_decode_u_64(arr[7]),
      virtualMemory: dco_decode_u_64(arr[8]),
      startTime: dco_decode_u_64(arr[9]),
      runTime: dco_decode_u_64(arr[10]),
      cpuUsage: dco_decode_f_32(arr[11]),
      userId: dco_decode_String(arr[12]),
      effectiveUserId: dco_decode_opt_String(arr[13]),
      groupId: dco_decode_opt_String(arr[14]),
      effectiveGroupId: dco_decode_opt_String(arr[15]),
      processStatus: dco_decode_process_status_entity(arr[16]),
    );
  }

  @protected
  ProcessStatusEntity dco_decode_process_status_entity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return ProcessStatusEntity_Idle();
      case 1:
        return ProcessStatusEntity_Run();
      case 2:
        return ProcessStatusEntity_Sleep();
      case 3:
        return ProcessStatusEntity_Stop();
      case 4:
        return ProcessStatusEntity_Zombie();
      case 5:
        return ProcessStatusEntity_Tracing();
      case 6:
        return ProcessStatusEntity_Dead();
      case 7:
        return ProcessStatusEntity_WakeKill();
      case 8:
        return ProcessStatusEntity_Waking();
      case 9:
        return ProcessStatusEntity_Parked();
      case 10:
        return ProcessStatusEntity_LockBlocked();
      case 11:
        return ProcessStatusEntity_UninterruptibleDiskSleep();
      case 12:
        return ProcessStatusEntity_Unknown(
          dco_decode_u_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  (Map<String, BigInt>, Map<String, String?>)
      dco_decode_record_map_string_u_64_map_string_opt_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_Map_String_u_64(arr[0]),
      dco_decode_Map_String_opt_String(arr[1]),
    );
  }

  @protected
  (String, String?) dco_decode_record_string_opt_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_opt_String(arr[1]),
    );
  }

  @protected
  (String, BigInt) dco_decode_record_string_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_u_64(arr[1]),
    );
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  UsageEntity dco_decode_usage_entity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return UsageEntity(
      memory: dco_decode_u_32(arr[0]),
    );
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  WindowEntity dco_decode_window_entity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return WindowEntity(
      id: dco_decode_u_32(arr[0]),
      title: dco_decode_String(arr[1]),
      position: dco_decode_position_entity(arr[2]),
      info: dco_decode_info_entity(arr[3]),
      usage: dco_decode_usage_entity(arr[4]),
      url: dco_decode_String(arr[5]),
    );
  }

  @protected
  WindowIconEntity dco_decode_window_icon_entity(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return WindowIconEntity(
      window: dco_decode_window_entity(arr[0]),
      icon: dco_decode_icon_entity(arr[1]),
    );
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  Manager
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerManager(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ManagerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SenderString
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderString(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SenderStringImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Object sse_decode_DartOpaque(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_isize(deserializer);
    return decodeDartOpaque(inner, generalizedFrbRustBinding);
  }

  @protected
  Map<String, String?> sse_decode_Map_String_opt_String(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_opt_string(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, BigInt> sse_decode_Map_String_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_u_64(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Manager
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerManager(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ManagerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SenderString
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderString(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SenderStringImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  ClipImage sse_decode_box_autoadd_clip_image(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_clip_image(deserializer));
  }

  @protected
  ClipboardData sse_decode_box_autoadd_clipboard_data(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_clipboard_data(deserializer));
  }

  @protected
  FFIIconEvent sse_decode_box_autoadd_ffi_icon_event(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_icon_event(deserializer));
  }

  @protected
  FFIPhysicalPosition sse_decode_box_autoadd_ffi_physical_position(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_physical_position(deserializer));
  }

  @protected
  FFIRect sse_decode_box_autoadd_ffi_rect(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_rect(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_32(deserializer));
  }

  @protected
  ClipImage sse_decode_clip_image(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_width = sse_decode_u_32(deserializer);
    var var_height = sse_decode_u_32(deserializer);
    var var_bytes = sse_decode_list_prim_u_8_strict(deserializer);
    return ClipImage(width: var_width, height: var_height, bytes: var_bytes);
  }

  @protected
  ClipboardData sse_decode_clipboard_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_dataType = sse_decode_data_type(deserializer);
    var var_content = sse_decode_opt_String(deserializer);
    var var_image = sse_decode_opt_box_autoadd_clip_image(deserializer);
    var var_paths = sse_decode_opt_list_String(deserializer);
    var var_icon = sse_decode_opt_String(deserializer);
    var var_appName = sse_decode_opt_String(deserializer);
    return ClipboardData(
        dataType: var_dataType,
        content: var_content,
        image: var_image,
        paths: var_paths,
        icon: var_icon,
        appName: var_appName);
  }

  @protected
  CpuEntity sse_decode_cpu_entity(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_vendorId = sse_decode_String(deserializer);
    var var_brand = sse_decode_String(deserializer);
    var var_usage = sse_decode_cpu_usage_entity(deserializer);
    return CpuEntity(
        name: var_name,
        vendorId: var_vendorId,
        brand: var_brand,
        usage: var_usage);
  }

  @protected
  CpuUsageEntity sse_decode_cpu_usage_entity(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_percent = sse_decode_f_32(deserializer);
    var var_frequency = sse_decode_u_64(deserializer);
    return CpuUsageEntity(percent: var_percent, frequency: var_frequency);
  }

  @protected
  DataType sse_decode_data_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return DataType.values[inner];
  }

  @protected
  double sse_decode_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat32();
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  FFIIconEvent sse_decode_ffi_icon_event(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_id = sse_decode_String(deserializer);
        var var_position =
            sse_decode_box_autoadd_ffi_physical_position(deserializer);
        var var_rect = sse_decode_box_autoadd_ffi_rect(deserializer);
        var var_button = sse_decode_ffi_mouse_button(deserializer);
        var var_buttonState = sse_decode_ffi_mouse_button_state(deserializer);
        return FFIIconEvent_Click(
            id: var_id,
            position: var_position,
            rect: var_rect,
            button: var_button,
            buttonState: var_buttonState);
      case 1:
        var var_id = sse_decode_String(deserializer);
        var var_position =
            sse_decode_box_autoadd_ffi_physical_position(deserializer);
        var var_rect = sse_decode_box_autoadd_ffi_rect(deserializer);
        var var_button = sse_decode_ffi_mouse_button(deserializer);
        return FFIIconEvent_DoubleClick(
            id: var_id,
            position: var_position,
            rect: var_rect,
            button: var_button);
      case 2:
        var var_id = sse_decode_String(deserializer);
        var var_position =
            sse_decode_box_autoadd_ffi_physical_position(deserializer);
        var var_rect = sse_decode_box_autoadd_ffi_rect(deserializer);
        return FFIIconEvent_Enter(
            id: var_id, position: var_position, rect: var_rect);
      case 3:
        var var_id = sse_decode_String(deserializer);
        var var_position =
            sse_decode_box_autoadd_ffi_physical_position(deserializer);
        var var_rect = sse_decode_box_autoadd_ffi_rect(deserializer);
        return FFIIconEvent_Move(
            id: var_id, position: var_position, rect: var_rect);
      case 4:
        var var_id = sse_decode_String(deserializer);
        var var_position =
            sse_decode_box_autoadd_ffi_physical_position(deserializer);
        var var_rect = sse_decode_box_autoadd_ffi_rect(deserializer);
        return FFIIconEvent_Leave(
            id: var_id, position: var_position, rect: var_rect);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  FFIMouseButton sse_decode_ffi_mouse_button(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return FFIMouseButton.values[inner];
  }

  @protected
  FFIMouseButtonState sse_decode_ffi_mouse_button_state(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return FFIMouseButtonState.values[inner];
  }

  @protected
  FFIPhysicalPosition sse_decode_ffi_physical_position(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_x = sse_decode_f_64(deserializer);
    var var_y = sse_decode_f_64(deserializer);
    return FFIPhysicalPosition(x: var_x, y: var_y);
  }

  @protected
  FFIPhysicalSize sse_decode_ffi_physical_size(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_width = sse_decode_u_32(deserializer);
    var var_height = sse_decode_u_32(deserializer);
    return FFIPhysicalSize(width: var_width, height: var_height);
  }

  @protected
  FFIRect sse_decode_ffi_rect(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_size = sse_decode_ffi_physical_size(deserializer);
    var var_position = sse_decode_ffi_physical_position(deserializer);
    return FFIRect(size: var_size, position: var_position);
  }

  @protected
  FFISysTrayEvent sse_decode_ffi_sys_tray_event(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_eventType = sse_decode_my_sys_tray_event_enum(deserializer);
    var var_menuEventId = sse_decode_opt_String(deserializer);
    var var_trayEvent = sse_decode_opt_box_autoadd_ffi_icon_event(deserializer);
    return FFISysTrayEvent(
        eventType: var_eventType,
        menuEventId: var_menuEventId,
        trayEvent: var_trayEvent);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  IconEntity sse_decode_icon_entity(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_data = sse_decode_String(deserializer);
    var var_height = sse_decode_u_32(deserializer);
    var var_width = sse_decode_u_32(deserializer);
    return IconEntity(data: var_data, height: var_height, width: var_width);
  }

  @protected
  InfoEntity sse_decode_info_entity(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_processId = sse_decode_u_32(deserializer);
    var var_path = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_execName = sse_decode_String(deserializer);
    return InfoEntity(
        processId: var_processId,
        path: var_path,
        name: var_name,
        execName: var_execName);
  }

  @protected
  IpNetworkEntity sse_decode_ip_network_entity(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_ip = sse_decode_ip_network_type(deserializer);
    var var_prefix = sse_decode_u_8(deserializer);
    return IpNetworkEntity(ip: var_ip, prefix: var_prefix);
  }

  @protected
  IpNetworkType sse_decode_ip_network_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return IpNetworkType.values[inner];
  }

  @protected
  PlatformInt64 sse_decode_isize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<CpuEntity> sse_decode_list_cpu_entity(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <CpuEntity>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_cpu_entity(deserializer));
    }
    return ans_;
  }

  @protected
  List<IpNetworkEntity> sse_decode_list_ip_network_entity(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <IpNetworkEntity>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_ip_network_entity(deserializer));
    }
    return ans_;
  }

  @protected
  List<NetWorkEntity> sse_decode_list_net_work_entity(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <NetWorkEntity>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_net_work_entity(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<ProcessEntity> sse_decode_list_process_entity(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ProcessEntity>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_process_entity(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, String?)> sse_decode_list_record_string_opt_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, String?)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_opt_string(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, BigInt)> sse_decode_list_record_string_u_64(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, BigInt)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_u_64(deserializer));
    }
    return ans_;
  }

  @protected
  List<WindowIconEntity> sse_decode_list_window_icon_entity(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <WindowIconEntity>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_window_icon_entity(deserializer));
    }
    return ans_;
  }

  @protected
  MySysTrayEventEnum sse_decode_my_sys_tray_event_enum(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return MySysTrayEventEnum.values[inner];
  }

  @protected
  NetWorkEntity sse_decode_net_work_entity(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_totalReceived = sse_decode_u_64(deserializer);
    var var_received = sse_decode_u_64(deserializer);
    var var_transmitted = sse_decode_u_64(deserializer);
    var var_totalTransmitted = sse_decode_u_64(deserializer);
    var var_packetsReceived = sse_decode_u_64(deserializer);
    var var_totalPacketsReceived = sse_decode_u_64(deserializer);
    var var_packetsTransmitted = sse_decode_u_64(deserializer);
    var var_totalPacketsTransmitted = sse_decode_u_64(deserializer);
    var var_errorsOnReceived = sse_decode_u_64(deserializer);
    var var_totalErrorsOnReceived = sse_decode_u_64(deserializer);
    var var_errorsOnTransmitted = sse_decode_u_64(deserializer);
    var var_totalErrorsOnTransmitted = sse_decode_u_64(deserializer);
    var var_macAddress = sse_decode_String(deserializer);
    var var_ipNetworks = sse_decode_list_ip_network_entity(deserializer);
    return NetWorkEntity(
        name: var_name,
        totalReceived: var_totalReceived,
        received: var_received,
        transmitted: var_transmitted,
        totalTransmitted: var_totalTransmitted,
        packetsReceived: var_packetsReceived,
        totalPacketsReceived: var_totalPacketsReceived,
        packetsTransmitted: var_packetsTransmitted,
        totalPacketsTransmitted: var_totalPacketsTransmitted,
        errorsOnReceived: var_errorsOnReceived,
        totalErrorsOnReceived: var_totalErrorsOnReceived,
        errorsOnTransmitted: var_errorsOnTransmitted,
        totalErrorsOnTransmitted: var_totalErrorsOnTransmitted,
        macAddress: var_macAddress,
        ipNetworks: var_ipNetworks);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ClipImage? sse_decode_opt_box_autoadd_clip_image(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_clip_image(deserializer));
    } else {
      return null;
    }
  }

  @protected
  FFIIconEvent? sse_decode_opt_box_autoadd_ffi_icon_event(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_ffi_icon_event(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<String>? sse_decode_opt_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PositionEntity sse_decode_position_entity(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_x = sse_decode_i_32(deserializer);
    var var_y = sse_decode_i_32(deserializer);
    var var_width = sse_decode_i_32(deserializer);
    var var_height = sse_decode_i_32(deserializer);
    var var_isFullScreen = sse_decode_bool(deserializer);
    return PositionEntity(
        x: var_x,
        y: var_y,
        width: var_width,
        height: var_height,
        isFullScreen: var_isFullScreen);
  }

  @protected
  ProcessEntity sse_decode_process_entity(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_cmd = sse_decode_list_String(deserializer);
    var var_pid = sse_decode_u_32(deserializer);
    var var_parent = sse_decode_opt_box_autoadd_u_32(deserializer);
    var var_environ = sse_decode_list_String(deserializer);
    var var_cwd = sse_decode_opt_String(deserializer);
    var var_root = sse_decode_opt_String(deserializer);
    var var_memory = sse_decode_u_64(deserializer);
    var var_virtualMemory = sse_decode_u_64(deserializer);
    var var_startTime = sse_decode_u_64(deserializer);
    var var_runTime = sse_decode_u_64(deserializer);
    var var_cpuUsage = sse_decode_f_32(deserializer);
    var var_userId = sse_decode_String(deserializer);
    var var_effectiveUserId = sse_decode_opt_String(deserializer);
    var var_groupId = sse_decode_opt_String(deserializer);
    var var_effectiveGroupId = sse_decode_opt_String(deserializer);
    var var_processStatus = sse_decode_process_status_entity(deserializer);
    return ProcessEntity(
        name: var_name,
        cmd: var_cmd,
        pid: var_pid,
        parent: var_parent,
        environ: var_environ,
        cwd: var_cwd,
        root: var_root,
        memory: var_memory,
        virtualMemory: var_virtualMemory,
        startTime: var_startTime,
        runTime: var_runTime,
        cpuUsage: var_cpuUsage,
        userId: var_userId,
        effectiveUserId: var_effectiveUserId,
        groupId: var_groupId,
        effectiveGroupId: var_effectiveGroupId,
        processStatus: var_processStatus);
  }

  @protected
  ProcessStatusEntity sse_decode_process_status_entity(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return ProcessStatusEntity_Idle();
      case 1:
        return ProcessStatusEntity_Run();
      case 2:
        return ProcessStatusEntity_Sleep();
      case 3:
        return ProcessStatusEntity_Stop();
      case 4:
        return ProcessStatusEntity_Zombie();
      case 5:
        return ProcessStatusEntity_Tracing();
      case 6:
        return ProcessStatusEntity_Dead();
      case 7:
        return ProcessStatusEntity_WakeKill();
      case 8:
        return ProcessStatusEntity_Waking();
      case 9:
        return ProcessStatusEntity_Parked();
      case 10:
        return ProcessStatusEntity_LockBlocked();
      case 11:
        return ProcessStatusEntity_UninterruptibleDiskSleep();
      case 12:
        var var_field0 = sse_decode_u_32(deserializer);
        return ProcessStatusEntity_Unknown(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  (Map<String, BigInt>, Map<String, String?>)
      sse_decode_record_map_string_u_64_map_string_opt_string(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_Map_String_u_64(deserializer);
    var var_field1 = sse_decode_Map_String_opt_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, String?) sse_decode_record_string_opt_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_opt_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, BigInt) sse_decode_record_string_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_u_64(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  UsageEntity sse_decode_usage_entity(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_memory = sse_decode_u_32(deserializer);
    return UsageEntity(memory: var_memory);
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  WindowEntity sse_decode_window_entity(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_32(deserializer);
    var var_title = sse_decode_String(deserializer);
    var var_position = sse_decode_position_entity(deserializer);
    var var_info = sse_decode_info_entity(deserializer);
    var var_usage = sse_decode_usage_entity(deserializer);
    var var_url = sse_decode_String(deserializer);
    return WindowEntity(
        id: var_id,
        title: var_title,
        position: var_position,
        info: var_info,
        usage: var_usage,
        url: var_url);
  }

  @protected
  WindowIconEntity sse_decode_window_icon_entity(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_window = sse_decode_window_entity(deserializer);
    var var_icon = sse_decode_icon_entity(deserializer);
    return WindowIconEntity(window: var_window, icon: var_icon);
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerManager(
          Manager self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ManagerImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderString(
          SenderString self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SenderStringImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs_String_Output_String_AnyhowException(
      FutureOr<String> Function(String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_String_Output_String_AnyhowException(self),
        serializer);
  }

  @protected
  void sse_encode_DartOpaque(Object self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_isize(
        PlatformPointerUtil.ptrToPlatformInt64(encodeDartOpaque(
            self, portManager.dartHandlerPort, generalizedFrbRustBinding)),
        serializer);
  }

  @protected
  void sse_encode_Map_String_opt_String(
      Map<String, String?> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_opt_string(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_String_u_64(
      Map<String, BigInt> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_u_64(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerManager(
          Manager self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ManagerImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderString(
          SenderString self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SenderStringImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_clip_image(
      ClipImage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_clip_image(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_clipboard_data(
      ClipboardData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_clipboard_data(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_icon_event(
      FFIIconEvent self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_icon_event(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_physical_position(
      FFIPhysicalPosition self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_physical_position(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_rect(FFIRect self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_rect(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self, serializer);
  }

  @protected
  void sse_encode_clip_image(ClipImage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.width, serializer);
    sse_encode_u_32(self.height, serializer);
    sse_encode_list_prim_u_8_strict(self.bytes, serializer);
  }

  @protected
  void sse_encode_clipboard_data(ClipboardData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_data_type(self.dataType, serializer);
    sse_encode_opt_String(self.content, serializer);
    sse_encode_opt_box_autoadd_clip_image(self.image, serializer);
    sse_encode_opt_list_String(self.paths, serializer);
    sse_encode_opt_String(self.icon, serializer);
    sse_encode_opt_String(self.appName, serializer);
  }

  @protected
  void sse_encode_cpu_entity(CpuEntity self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.vendorId, serializer);
    sse_encode_String(self.brand, serializer);
    sse_encode_cpu_usage_entity(self.usage, serializer);
  }

  @protected
  void sse_encode_cpu_usage_entity(
      CpuUsageEntity self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_32(self.percent, serializer);
    sse_encode_u_64(self.frequency, serializer);
  }

  @protected
  void sse_encode_data_type(DataType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat32(self);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_ffi_icon_event(FFIIconEvent self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case FFIIconEvent_Click(
          id: final id,
          position: final position,
          rect: final rect,
          button: final button,
          buttonState: final buttonState
        ):
        sse_encode_i_32(0, serializer);
        sse_encode_String(id, serializer);
        sse_encode_box_autoadd_ffi_physical_position(position, serializer);
        sse_encode_box_autoadd_ffi_rect(rect, serializer);
        sse_encode_ffi_mouse_button(button, serializer);
        sse_encode_ffi_mouse_button_state(buttonState, serializer);
      case FFIIconEvent_DoubleClick(
          id: final id,
          position: final position,
          rect: final rect,
          button: final button
        ):
        sse_encode_i_32(1, serializer);
        sse_encode_String(id, serializer);
        sse_encode_box_autoadd_ffi_physical_position(position, serializer);
        sse_encode_box_autoadd_ffi_rect(rect, serializer);
        sse_encode_ffi_mouse_button(button, serializer);
      case FFIIconEvent_Enter(
          id: final id,
          position: final position,
          rect: final rect
        ):
        sse_encode_i_32(2, serializer);
        sse_encode_String(id, serializer);
        sse_encode_box_autoadd_ffi_physical_position(position, serializer);
        sse_encode_box_autoadd_ffi_rect(rect, serializer);
      case FFIIconEvent_Move(
          id: final id,
          position: final position,
          rect: final rect
        ):
        sse_encode_i_32(3, serializer);
        sse_encode_String(id, serializer);
        sse_encode_box_autoadd_ffi_physical_position(position, serializer);
        sse_encode_box_autoadd_ffi_rect(rect, serializer);
      case FFIIconEvent_Leave(
          id: final id,
          position: final position,
          rect: final rect
        ):
        sse_encode_i_32(4, serializer);
        sse_encode_String(id, serializer);
        sse_encode_box_autoadd_ffi_physical_position(position, serializer);
        sse_encode_box_autoadd_ffi_rect(rect, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_ffi_mouse_button(
      FFIMouseButton self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_ffi_mouse_button_state(
      FFIMouseButtonState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_ffi_physical_position(
      FFIPhysicalPosition self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_64(self.x, serializer);
    sse_encode_f_64(self.y, serializer);
  }

  @protected
  void sse_encode_ffi_physical_size(
      FFIPhysicalSize self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.width, serializer);
    sse_encode_u_32(self.height, serializer);
  }

  @protected
  void sse_encode_ffi_rect(FFIRect self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_physical_size(self.size, serializer);
    sse_encode_ffi_physical_position(self.position, serializer);
  }

  @protected
  void sse_encode_ffi_sys_tray_event(
      FFISysTrayEvent self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_my_sys_tray_event_enum(self.eventType, serializer);
    sse_encode_opt_String(self.menuEventId, serializer);
    sse_encode_opt_box_autoadd_ffi_icon_event(self.trayEvent, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_icon_entity(IconEntity self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.data, serializer);
    sse_encode_u_32(self.height, serializer);
    sse_encode_u_32(self.width, serializer);
  }

  @protected
  void sse_encode_info_entity(InfoEntity self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.processId, serializer);
    sse_encode_String(self.path, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.execName, serializer);
  }

  @protected
  void sse_encode_ip_network_entity(
      IpNetworkEntity self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ip_network_type(self.ip, serializer);
    sse_encode_u_8(self.prefix, serializer);
  }

  @protected
  void sse_encode_ip_network_type(
      IpNetworkType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_isize(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_cpu_entity(
      List<CpuEntity> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_cpu_entity(item, serializer);
    }
  }

  @protected
  void sse_encode_list_ip_network_entity(
      List<IpNetworkEntity> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_ip_network_entity(item, serializer);
    }
  }

  @protected
  void sse_encode_list_net_work_entity(
      List<NetWorkEntity> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_net_work_entity(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_process_entity(
      List<ProcessEntity> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_process_entity(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_opt_string(
      List<(String, String?)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_opt_string(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_u_64(
      List<(String, BigInt)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_u_64(item, serializer);
    }
  }

  @protected
  void sse_encode_list_window_icon_entity(
      List<WindowIconEntity> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_window_icon_entity(item, serializer);
    }
  }

  @protected
  void sse_encode_my_sys_tray_event_enum(
      MySysTrayEventEnum self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_net_work_entity(
      NetWorkEntity self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_u_64(self.totalReceived, serializer);
    sse_encode_u_64(self.received, serializer);
    sse_encode_u_64(self.transmitted, serializer);
    sse_encode_u_64(self.totalTransmitted, serializer);
    sse_encode_u_64(self.packetsReceived, serializer);
    sse_encode_u_64(self.totalPacketsReceived, serializer);
    sse_encode_u_64(self.packetsTransmitted, serializer);
    sse_encode_u_64(self.totalPacketsTransmitted, serializer);
    sse_encode_u_64(self.errorsOnReceived, serializer);
    sse_encode_u_64(self.totalErrorsOnReceived, serializer);
    sse_encode_u_64(self.errorsOnTransmitted, serializer);
    sse_encode_u_64(self.totalErrorsOnTransmitted, serializer);
    sse_encode_String(self.macAddress, serializer);
    sse_encode_list_ip_network_entity(self.ipNetworks, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_clip_image(
      ClipImage? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_clip_image(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_ffi_icon_event(
      FFIIconEvent? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_ffi_icon_event(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_String(
      List<String>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_String(self, serializer);
    }
  }

  @protected
  void sse_encode_position_entity(
      PositionEntity self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.x, serializer);
    sse_encode_i_32(self.y, serializer);
    sse_encode_i_32(self.width, serializer);
    sse_encode_i_32(self.height, serializer);
    sse_encode_bool(self.isFullScreen, serializer);
  }

  @protected
  void sse_encode_process_entity(ProcessEntity self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_list_String(self.cmd, serializer);
    sse_encode_u_32(self.pid, serializer);
    sse_encode_opt_box_autoadd_u_32(self.parent, serializer);
    sse_encode_list_String(self.environ, serializer);
    sse_encode_opt_String(self.cwd, serializer);
    sse_encode_opt_String(self.root, serializer);
    sse_encode_u_64(self.memory, serializer);
    sse_encode_u_64(self.virtualMemory, serializer);
    sse_encode_u_64(self.startTime, serializer);
    sse_encode_u_64(self.runTime, serializer);
    sse_encode_f_32(self.cpuUsage, serializer);
    sse_encode_String(self.userId, serializer);
    sse_encode_opt_String(self.effectiveUserId, serializer);
    sse_encode_opt_String(self.groupId, serializer);
    sse_encode_opt_String(self.effectiveGroupId, serializer);
    sse_encode_process_status_entity(self.processStatus, serializer);
  }

  @protected
  void sse_encode_process_status_entity(
      ProcessStatusEntity self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case ProcessStatusEntity_Idle():
        sse_encode_i_32(0, serializer);
      case ProcessStatusEntity_Run():
        sse_encode_i_32(1, serializer);
      case ProcessStatusEntity_Sleep():
        sse_encode_i_32(2, serializer);
      case ProcessStatusEntity_Stop():
        sse_encode_i_32(3, serializer);
      case ProcessStatusEntity_Zombie():
        sse_encode_i_32(4, serializer);
      case ProcessStatusEntity_Tracing():
        sse_encode_i_32(5, serializer);
      case ProcessStatusEntity_Dead():
        sse_encode_i_32(6, serializer);
      case ProcessStatusEntity_WakeKill():
        sse_encode_i_32(7, serializer);
      case ProcessStatusEntity_Waking():
        sse_encode_i_32(8, serializer);
      case ProcessStatusEntity_Parked():
        sse_encode_i_32(9, serializer);
      case ProcessStatusEntity_LockBlocked():
        sse_encode_i_32(10, serializer);
      case ProcessStatusEntity_UninterruptibleDiskSleep():
        sse_encode_i_32(11, serializer);
      case ProcessStatusEntity_Unknown(field0: final field0):
        sse_encode_i_32(12, serializer);
        sse_encode_u_32(field0, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_record_map_string_u_64_map_string_opt_string(
      (Map<String, BigInt>, Map<String, String?>) self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Map_String_u_64(self.$1, serializer);
    sse_encode_Map_String_opt_String(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_opt_string(
      (String, String?) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_opt_String(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_u_64(
      (String, BigInt) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_u_64(self.$2, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usage_entity(UsageEntity self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.memory, serializer);
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_window_entity(WindowEntity self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.id, serializer);
    sse_encode_String(self.title, serializer);
    sse_encode_position_entity(self.position, serializer);
    sse_encode_info_entity(self.info, serializer);
    sse_encode_usage_entity(self.usage, serializer);
    sse_encode_String(self.url, serializer);
  }

  @protected
  void sse_encode_window_icon_entity(
      WindowIconEntity self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_window_entity(self.window, serializer);
    sse_encode_icon_entity(self.icon, serializer);
  }
}

@sealed
class ManagerImpl extends RustOpaque implements Manager {
  // Not to be used by end users
  ManagerImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ManagerImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Manager,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Manager,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ManagerPtr,
  );
}

@sealed
class SenderStringImpl extends RustOpaque implements SenderString {
  // Not to be used by end users
  SenderStringImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SenderStringImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_SenderString,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_SenderString,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_SenderStringPtr,
  );
}
